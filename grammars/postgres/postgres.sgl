grammar postgres;

// PostgresAggregate.java
// TODO: maybe pass operands in instead of generating here
aggregate_func 
    : 'AVG(' ( int_expr | float_expr | real_expr | decimal_expr )**random[1, ', '] ')' 
    | 'BIT_AND(' int_expr**random[1, ', '] ')' | 'BIT_OR(' int_expr**random[1, ', '] ')' | 'BOOL_AND(' bool_expr**random[1, ', '] ')'
    | 'BOOL_AND(' bool_expr**random[1, ', '] ')' | 'COUNT(' int_expr**random[1, ', '] ')' | 'EVERY(' bool_expr**random[1, ', '] ')'
    | 'MAX(' any_expr**random[1, ', '] ')' | 'MIN(' any_expr**random[1, ', '] ')'
    | 'SUM(' ( int_expr | float_expr | real_expr | decimal_expr )**random[1, ', '] ')' 
    ;

// PostgresAlias.java
alias
    : ' AS '
    ;

// PostgresBetweenOperation.java
between [type]
    : ' BETWEEN ' ' SYMMETRIC '? expr[type] ' AND ' expr[type]
    ;

// PostgresBinaryArithmeticOperation.java
binary_arith_op
    : '+' | '-' | '*' | '/' | '%' | '^' 
    ;

// PostgresBinaryBitOperation.java
binary_bit_op
    : '||' | '&' | '|' | '#' | '<<' | '>>' 
    ;

// PostgresBinaryComparisonOperation.java
binary_comp_op
    : '=' | ' IS DISTINCT FROM ' | ' IS NOT DISTINCT FROM ' | '!=' | '<' | '<=' | '>' | '>=' 
    ;

// PostgresBinaryLogicalOperation.java
binary_logical_op 
    : ' AND ' | ' OR ' 
    ;

// PostgresBinaryRangeOperation.java
binary_range_op
    : '+' | '-' | '*' 
    ;

binary_range_comp_op
    : '@>' | '<@' | '&&' | '<<' | '>>' | '&<' | '>&' | '-|-'
    ;

// PostgresCastOperation.java
cast_op
    : '::'
    ;

// PostgresCollate.java
collate_op
    : ' COLLATE '
    ;

// PostgresColumnReference.java
// TODO

// PostgresConcatOperation.java
concat_op
    : ' || '
    ;

// PostgresConstant.java
const
    : boolean_const
    | null_const
    | str_const
    | int_const
    | float_const
    | double_const
    | dec_const
    | bit_const
    | range_const
    ;

boolean_const : ' TRUE ' | ' FALSE ' ;
null_const : ' NULL ';
str_const :  DQ ( (CH | DIGIT) )**random[1, 100] DQ ;
int_const : (DS)**random[0, 1, 90] (DIGIT)**random[1, 5] ;
float_const : (DS)**random[0, 1, '', 90] int_val ('.' int_val )? ;
double_const : float_const;
dec_const [ts=4, ds=2] : (DS)**random[0, 1, '', 90] gs=$ts$-ds DIGIT**gs ( '.' DIGIT**ds )? ;
bit_const [size=8] : ' B(\'' ( '0' | '1' )**random[1,size] '\')';
range_const : ('(' | '[' ) int_const ',' int_const (']' | ')' ) '::int4range';

abs [type] : ' ABS(' expr[type] ') ';
upper : ' UPPER(' str_expr ') ';
lower : ' LOWER(' str_expr ') ';
length : ' LENGTH(' str_expr ') ';
num_nonnulls : ' NUM_NONNULLS(' expr**random[1, 10, ','] ') ';
num_nulls : ' NUM_NULLS(' expr**random[1, 10, ','] ') ';

data_types : 'INT' | 'BOOLEAN' | 'TEXT' | 'DECIMAL' | 'FLOAT' | 'REAL' | 'RANGE' | 'MONEY' | 'BIT' | 'INET' ;

fragment alterColumn : ALTER COLUMN? columns[t].any ' ';

alterTable [view=false]
    : ALTER ( VIEW view=$true| TABLE (ONLY error['cannot use ONLY for foreign key on partitioned table'])? ) 
      (t=views.any <view==true> | t=tables.any <view==false> )
      (
        DROP (IF EXISTS)? columns[t].any ( RESTRICT | CASCADE )? error['because other objects depend on it', 'does not exist', 'cannot drop column', 'cannot drop inherited column']
        | alterColumn (SET DATA)? TYPE data_types error[
            'cannot alter type of a column used by a view or rule',
            'cannot convert infinity to numeric', 'is duplicated', 
            'cannot be cast automatically', 'is an identity column',
            'identity column type must be smallint, integer, or bigint',
            'out of range',
            'cannot alter type of column named in partition key',
            'cannot alter type of column referenced in partition key expression',
            'because it is part of the partition key of relation',
            'argument of CHECK must be type boolean',
            'operator does not exist',
            'must be type',
            'You might need to add explicit type casts',
            'cannot cast type',
            'foreign key constrain',
            'division by zero',
            'value too long for type character varying',
            'cannot drop index',
            'cannot alter inherited column',
            'must be changed in child tables too',
            'could not determine which collation to use for index expression',
            'bit string too long for type bit varying',
            'cannot alter type of a column used by a generated column'
          ]
        | alterColumn ( DROP DEFAULT | SET DEFAULT expr[columns[t].any] error['is out of range', 'but default expression is of type', 'cannot cast']) error['is a generated column', 'is an identity column']
        | alterColumn ( SET NOT NULL error['contains null values'] | DROP NOT NULL error['is in a primary key', 'is an identity column', 'is in index used as replica identity'])
        | alterColumn SET STATISTICS random[0,10000,0]
        | alterColumn SET '( n_distinct = ' ( '-0.' '0'* random[1,90] | random[1,200])  ') '
        | alterColumn RESET '( n_distinct ) '
        | alterColumn SET STORAGE ( PLAIN | EXTERNAL | EXTENDED | MAIN ) error['can only have storage', 'is an identity column']
        | alterColumn DROP EXPRESSION ifExists error[
            'is not a generated column','is not a stored generated column',
            'cannot drop expression from inherited column','cannot drop generation expression from inherited column',
            'must be applied to child tables too','cannot drop expression from column'
          ]
        | //TODO
      )
    ;

analyze : ANALYZE ( ' ( SKIP_LOCKED ) ' | ' ( VERBOSE ) ' )? ( t=tables.any ' ('(  cc=$columns[t] (cc.unique_any)**random[1,cc.len, ',']  ' )')? )? error['deadlock'];

cluster 
    : CLUSTER ( t=tables.any ( <indexes[t].len>0> USING indexes[t].any error['cannot cluster on partial index'] | ' ' )? )? 
    error['there is no previously clustered index for table', 'cannot cluster a partitioned table', 'access method does not support clustering']
    ;

comment
    : COMMENT ON (
        INDEX indexes[tables.any].any
        | COLUMN t=tables.any DOT columns[t].any
        | STATISTICS statistics[tables.any].any
        | TABLE tables.any
    ) IS ( NULL | str_const )
    ;

// TODO: PostgresCommon

delete
    : DELETE FROM ONLY? t=tables.any wherePredicate[t]? (RETURNING expr)? error['out of range', 'cannot cast', 'invalid input syntax for', 'division by zero']
    ;

discard
    : DISCARD (<tables.filter['type','==', 'BASE TABLE'].len>0> (ALL | TEMPORARY | TEMP) | PLANS | SEQUENCES ) error['cannot run inside a transaction block']
    ;

dropIndex 
    : DROP INDEX (ifExists new['index'] <indexes.len==0> | ifExists? i=$indexes i.unique_any**random[1, i.len, ',', 95] ) ( CASCADE | RESTRICT )? 
    error['cannot drop desired object(s) because other objects depend on them', 'cannot drop index', 'does not exist']
    ;

explain : EXPLAIN ' (FORMAT JSON) ' select;

// TODO: Expression generator

op_classes : 'abstime_ops' | 'bit_ops' | 'bool_ops' | 'box_ops' | 'bpchar_ops' | 'bpchar_pattern_ops' | 'bytea_ops' | 'char_ops' | 'cidr_ops' | 'circle_ops' 
    | 'date_ops' | 'float4_ops' | 'float8_ops' | 'inet_ops' | 'int2_ops' | 'int4_ops' | 'int8_ops' | 'interval_ops' | 'line_ops' | 'lseg_ops' | 'macaddr_ops' | 'macaddr8_ops' 
    | 'money_ops' | 'name_ops' | 'numeric_ops' | 'oid_ops' | 'path_ops' | 'point_ops' | 'polygon_ops' | 'text_ops' | 'text_pattern_ops' | 'tid_ops' | 'time_ops' 
    | 'timestamp_ops' | 'timestamptz_ops' | 'timetz_ops' | 'uuid_ops' | 'varbit_ops' | 'varchar_ops' | 'varchar_pattern_ops' | 'array_ops' | 'jsonb_ops' 
    | 'jsonb_path_ops' | 'tsvector_ops' | 'tsquery_ops' | 'int2_hash_ops' | 'int4_hash_ops' | 'int8_hash_ops' | 'float4_hash_ops' | 'float8_hash_ops' | 'numeric_hash_ops' 
    | 'bool_hash_ops' | 'char_hash_ops' | 'name_hash_ops' | 'text_hash_ops' | 'bpchar_hash_ops' | 'varchar_hash_ops' | 'bytea_hash_ops' | 'oid_hash_ops' | 'abstime_hash_ops' 
    | 'date_hash_ops' | 'time_hash_ops' | 'timetz_hash_ops' | 'timestamp_hash_ops' | 'timestamptz_ops' | 'interval_hash_ops' | 'macaddr_hash_ops' 
    | 'macaddr8_hash_ops' | 'inet_hash_ops' | 'cidr_hash_ops' | 'uuid_hash_ops' | 'pg_lsn_ops' | 'pg_lsn_hash_ops'
    ;

createIndex [ih=false]
    : CREATE UNIQUE? INDEX new['index'] ON ONLY? t=tables.any c=$columns[t] ( USING ( ' BTREE ' | ' HASH ' ih=$true | ' GIST ' | ' GIN' ))? 
    ' (' ( c.any | <ih!=true> ((c.any | expr) SPACE (op_classes error['does not accept', 'does not exist for access method'])**random[0,1,99] ( ASC | DESC )? ( ' NULLS FIRST ' | ' NULLS LAST ' )**random[0,1.99] )**random[1, 3, ','] ) ') '
    ( INCLUDE '(' c.unique_any**random[1, c.len, ','] ')' <ih!=true> | ' ') wherePredicate[t]?
    error['already contains data', 'You might need to add explicit type casts', ' collations are not supported', 
        'because it has pending trigger events', 'could not determine which collation to use for index expression', 'could not determine which collation to use for string comparison', 
        'is duplicated', 'access method \"gin\" does not support unique indexes', 'access method \"hash\" does not support unique indexes', 'already exists', 
        'could not create unique index', 'has no default operator class', 'does not support', 'cannot cast', 'unsupported UNIQUE constraint with partition key definition', 
        'insufficient columns in UNIQUE constraint definition', 'invalid input syntax for', 'must be type ', 'integer out of range', 'division by zero', 'out of range', 
        'functions in index predicate must be marked IMMUTABLE', 'functions in index expression must be marked IMMUTABLE', 
        'result of range difference would not be contiguous', 'which is part of the partition key'
    ]
    ;

createInsert
    : INSERT INTO t=tables.any c=$columns[t] ' ( ' (cc+=c.unique_any)**random[1, c.len, ','] ' ) ' ( OVERRIDING (SYSTEM | USER ) VALUE )**random[0,1,99] VALUES 
    ' ( ' ( ' ( ' ( expr[cc.next] | DEFAULT )**random[1,cc.len, ','] ' ) ')**random[1,',',75] ' ) '
    ( ON CONFLICT ( columns[t].any error['there is no unique or exclusion constraint matching the ON CONFLICT specification'])? DO NOTHING )**random[0,1,90]
    error[
        'multiple assignments to same column',
        'violates foreign key constraint',
        'value too long for type character varying',
        'conflicting key value violates exclusion constraint',
        'violates not-null constraint',
        'current transaction is aborted',
        'bit string too long',
        'new row violates check option for view',
        'reached maximum value of sequence',
        'but expression is of type',
        'duplicate key value violates unique constraint',
        'identity column defined as GENERATED ALWAYS',
        'out of range',
        'violates check constraint',
        'no partition of relation',
        'invalid input syntax',
        'division by zero',
        'violates foreign key constraint',
        'data type unknown'
    ];

channel : 'asdf' | 'test';

notify : NOTIFY channel ', \'' str_const '\'' ;

listen : LISTEN channel;

unlisten : UNLISTEN ( channel | ASTERISK );

reindex
    : error['could not create unique index'] REINDEX 
    ( INDEX CONCURRENTLY? indexes.any | TABLE CONCURRENTLY? tables.any | DATABASE CONCURRENTLY? DB ) error['does not exist', 'REINDEX is not yet implemented for partitioned indexes', 'could not create unique index'];

createSequence
    : CREATE ( TEMPORARY | TEMP )? SEQUENCE ifNotExists ' seq ' ( AS ( ' smallint ' | ' integer ' | ' bigint '))?
    (INCREMENT BY? random[1, 75])? (( MINVALUE random[1,75] | NO MINVALUE ) error['must be less than MAXVALUE'])?
    (( MAXVALUE random[1,75] | NO MAXVALUE ) error['must be less than MAXVALUE'])? 
    (START WITH? random[1,75] error['cannot be less than MINVALUE', 'cannot be greater than MAXVALUE'])?
    (CACHE random[1,75])? (NO? CYCLE)? (OWNED BY NONE)? error['is out of range']
    ;

configOptions 
    : ' synchronous_commit = ' ( DEFAULT |  (' remote_apply ' | ' remote_write ' | ' local ' | ' off ' ))
    | ' wal_compression = ' ( DEFAULT |  ( ' 1 ' | ' 0 ' ))
    | ' commit_delay = ' ( DEFAULT |  random[1, 10000])
    | ' commit_siblings = ' ( DEFAULT |  random[1, 10000])
    | ' track_activities = ' ( DEFAULT |  (' 1 ' | ' 0 '))
    | ' track_counts = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' track_io_timing = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' track_functions = ' ( DEFAULT |  ('\'none\'' | '\'pl\'' | '\'all\''))
    | ' vacuum_freeze_table_age = ' ( DEFAULT |  ( ' 0 ' | ' 5 ' | ' 10 ' | ' 100 ' | ' 500 ' | ' 2000000000 ' ))
    | ' vacuum_freeze_min_age = ' ( DEFAULT |  ( ' 0 ' | ' 5 ' | ' 10 ' | ' 100 ' | ' 500 ' | ' 2000000000 ' ))
    | ' vacuum_multixact_freeze_table_age = ' ( DEFAULT |  ( ' 0 ' | ' 5 ' | ' 10 ' | ' 100 ' | ' 500 ' | ' 2000000000 ' ))
    | ' vacuum_multixact_freeze_min_age = ' ( DEFAULT |  ( ' 0 ' | ' 5 ' | ' 10 ' | ' 100 ' | ' 500 ' | ' 2000000000 ' ))
    | ' gin_fuzzy_search_limit = ' ( DEFAULT |  random[1, 10000])
    //| ' default_with_oids ' (' 1 ' | ' 0 ' )
    | ' synchronize_seqscans = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_bitmapscan = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_gathermerge = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_hashjoin = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_indexscan = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_indexonlyscan = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_material = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_mergejoin = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_nestloop = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_parallel_append = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_parallel_hash = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_partition_pruning = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_partitionwise_join = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_partitionwise_aggregate = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_seqscan = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_sort = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' enable_tidscan = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' seq_page_cost = ' ( DEFAULT |  (' 0.0 ' | ' 0.00001 ' | ' 0.05 ' | ' 0.1 ' | ' 1 ' | ' 10 ' | ' 10000 ' ))
    | ' random_page_cost = ' ( DEFAULT |  (' 0.0 ' | ' 0.00001 ' | ' 0.05 ' | ' 0.1 ' | ' 1 ' | ' 10 ' | ' 10000 ' ))
    | ' cpu_tuple_cost = ' ( DEFAULT |  (' 0.0 ' | ' 0.00001 ' | ' 0.05 ' | ' 0.1 ' | ' 1 ' | ' 10 ' | ' 10000 ' ))
    | ' cpu_index_tuple_cost = ' ( DEFAULT |  (' 0.0 ' | ' 0.00001 ' | ' 0.05 ' | ' 0.1 ' | ' 1 ' | ' 10 ' | ' 10000 ' ))
    | ' cpu_operator_cost = ' ( DEFAULT |  (' 0.0 ' | ' 0.00001 ' | ' 0.05 ' | ' 0.1 ' | ' 1 ' | ' 10 ' | ' 10000 ' ))
    | ' parallel_setup_cost = ' ( DEFAULT |  random[1, 10000])
    | ' parallel_tuple_cost = ' ( DEFAULT |  random[1, 10000] )
    | ' min_parallel_table_scan_size = ' ( DEFAULT |  random[1, 10000])
    | ' min_parallel_index_scan_size = ' ( DEFAULT |  random[1, 10000])
    | ' effective_cache_size = ' ( DEFAULT |  random[1, 10000])
    | ' jit_above_cost = ' ( DEFAULT |  ( ' -1 ' | random[0, 10000] ))
    | ' jit_inline_above_cost = ' ( DEFAULT |  ( ' -1 ' | random[0, 10000] ))
    | ' jit_optimize_above_cost = ' ( DEFAULT |  ( ' -1 ' | random[0, 10000] ))
    | ' geqo = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' geqo_threshold = ' ( DEFAULT |  random[1, 10000])
    | ' geqo_effort = ' ( DEFAULT |  random[1, 10000])
    | ' geqo_pool_size = ' ( DEFAULT |  random[1, 10000])
    | ' geqo_generations = ' ( DEFAULT |  random[1, 10000])
    | ' geqo_selection_bias = ' ( DEFAULT |  (' 1.5 ' | ' 1.8 ' | ' 2.0 ' ))
    | ' geqo_seed = ' ( DEFAULT |  ( ' 0 ' | ' 0.5 ' | ' 1 ' ))
    | ' default_statistics_target = ' ( DEFAULT |  random[1, 10000])
    | ' constraint_exclusion = ' ( DEFAULT |  ( ' on ' | ' off ' | ' partition '))
    | ' cursor_tuple_fraction = ' ( DEFAULT |  ( ' 0.0 ' | ' 0.1 ' | ' 0.000001 ' | ' 1 ' | ' 0.5 ' | ' 0.9999999 ' ))
    | ' from_collapse_limit = ' ( DEFAULT |  random[1, 10000])
    | ' jit = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' join_collapse_limit = ' ( DEFAULT |  random[1, 10000])
    | ' parallel_leader_participation = ' ( DEFAULT |  (' 1 ' | ' 0 ' ))
    | ' plan_cache_mode = ' ( DEFAULT |  (' auto ' | ' force_generic_plan ' | ' force_custom_plan '))
    ;

createSet : SET ( SESSION | LOCAL )? configOptions;

createStatistics
    : CREATE STATISTICS ifNotExists? t=$tables.any c=$columns[t] ( <c.len>=2> | <c.len>=2>) ' ' new['statistics']
    ( sts+=$' n_distinct ' sts+=$' dependencies ' sts+=$' mcv ' '(' sts.unique_any**random[1,sts.len, ', '] ')' )?
    ON c.unique_any**random[2,c.len,','] FROM t error['cannot have more than 8 columns in statistics']
    ;

dropStatistics : DROP STATISTICS statistics[tables.any].any ;

alterStatistics : ALTER STATISTICS statistics[tables.any].any SET STATISTICS (' -1 ' |random[0,10000]);

createTable : CREATE (TEMPORARY | TEMP | UNLOGGED)? TABLE ifNotExists? new['table'] (
        //TODO
    );

tables returns [t] : t=$query['SELECT table_name AS name, table_type AS type, table_schema FROM information_schema.tables WHERE table_schema NOT IN (\'information_schema\', \'pg_catalog\');', 'name', 'type', 'type'].filter['type','!=','VIEW'];
views returns [v] : v=$query['SELECT table_name AS name, table_type AS type, table_schema FROM information_schema.tables WHERE table_schema NOT IN (\'information_schema\', \'pg_catalog\');', 'name', 'type', 'type'].filter['type','==','VIEW'];
indexes [t=''] returns [i] 
    : <t==''> i=$query['SELECT indexname FROM pg_indexes WHERE schemaname NOT IN (\'information_schema\', \'pg_catalog\')', 'indexname']
    | <t!=''> i=$query['SELECT indexname FROM pg_indexes WHERE tablename = \''+$ t +$'\''', 'indexname']
    ;
columns [t] returns [c] 
    : c=$query[
        'SELECT column_name AS name, data_type AS type, numeric_precision AS precision, numeric_scale AS scale, character_maximum_length AS length FROM information_schema.columns  WHERE table_name = \''+$ t +$ '\' AND table_schema = \'public\'', 
        'name',
        'type', 'type',
        'precision', 'precision',
        'scale', 'scale',
        'length', 'length'
    ];
statistics [t] returns [s]
    : s=$query[ 'SELECT n.nspname as s_name, s.stxname as name FROM pg_statistic_ext s JOIN pg_class c ON c.oid = s.stxrelid JOIN pg_namespace n ON n.oid = s.stxnamespace WHERE c.relname = \'' +$ t +$ '\'', 'name']
    ;

ifNotExists : IF NOT EXISTS;
ifExists : IF EXISTS;

ADD : SPACE A D D SPACE;
ALGORITHM : SPACE A L G O R I T H M SPACE;
ALL : SPACE A L L SPACE;
ALTER : SPACE A L T E R SPACE;
AS : SPACE A S SPACE;
BY : SPACE B Y SPACE;
COLUMN : SPACE C O L U M N SPACE;
COMMENT : SPACE C O M M E N T SPACE;
COPY : SPACE C O P Y SPACE;
CREATE : SPACE C R E A T E SPACE;
DATABASE : SPACE D A T A B A S E SPACE;
DEFAULT : SPACE D E F A U L T SPACE;
DELAYED : SPACE D E L A Y E D SPACE;
DISCARD : SPACE D I S C A R D SPACE;
DISTINCT : SPACE D I S T I N C T SPACE;
DOUBLE : SPACE D O U B L E SPACE;
DROP : SPACE D R O P SPACE;
EXCLUSIVE : SPACE E X C L U S I V E SPACE;
EXISTS : SPACE E X I S T S SPACE;
FIRST : SPACE F I R S T SPACE;
FLOAT : SPACE F L O A T SPACE;
FROM : SPACE F R O M SPACE;
FULLTEXT : SPACE F U L L T E X T SPACE;
HASH : SPACE H A S H SPACE;
HIGH_PRIORITY : SPACE H I G H US P R I O R I T Y SPACE;
IF : SPACE I F SPACE;
IGNORE : SPACE I G N O R E SPACE;
IN : SPACE I N SPACE;
INDEX : SPACE I N D E X SPACE;
INPLACE : SPACE I N P L A C E SPACE;
INSERT : SPACE I N S E R T SPACE;
INT : SPACE I N T SPACE;
INTO : SPACE I N T O SPACE;
JOIN : SPACE J O I N SPACE;
KEY : SPACE K E Y SPACE;
LIKE : SPACE L I K E SPACE;
LINEAR : SPACE L I N E A R SPACE;
LOCK : SPACE L O C K SPACE;
LOW_PRIORITY : SPACE L O W US P R I O R I T Y SPACE;
NONE : SPACE N O N E SPACE;
NOT : SPACE N O T SPACE;
NOWAIT : SPACE N O W A I T SPACE;
NULL : SPACE N U L L SPACE;
OFFLINE : SPACE O F F L I N E SPACE;
ON : SPACE O N SPACE;
ONLINE : SPACE O N L I N E SPACE;
PARTITION : SPACE P A R T I T I O N SPACE;
PRIMARY : SPACE P R I M A R Y SPACE;
RENAME : SPACE R E N A M E SPACE;
REPLACE : SPACE R E P L A C E SPACE;
SCHEMA : SPACE S C H E M A SPACE;
SELECT : SPACE S E L E C T SPACE;
SET : SPACE S E T SPACE;
SHARED : SPACE S H A R E D SPACE;
SPATIAL : SPACE S P A T I A L SPACE;
TABLE : SPACE T A B L E SPACE;
TEMPORARY : SPACE T E M P O R A R Y SPACE;
TEXT : SPACE T E X T SPACE;
TO : SPACE T O SPACE;
TRUNCATE : SPACE T R U N C A T E SPACE;
UNIQUE : SPACE U N I Q U E SPACE;
UPDATE : SPACE U P D A T E SPACE;
USE : SPACE U S E SPACE;
VALUES : SPACE V A L U E S SPACE;
VIEW : SPACE V I E W SPACE;
WAIT : SPACE W A I T SPACE;
WHERE : SPACE W H E R E SPACE;


STUB : SPACE S T U B SPACE;



LB : '(';
RB : ')';
LT : '<';
GT : '>';
EQ : '=';
SC : ';';
US : '_';
DS : '-';
ASTERISK : '*';
DQ : '\"';
COMMA : ',';
DOT : '.';

fragment DIGIT : [0-9];
fragment SPACE : [\u0020];
fragment NL : [\n];
fragment A : [A];
fragment B : [B];
fragment C : [C];
fragment D : [D];
fragment E : [E];
fragment F : [F];
fragment G : [G];
fragment H : [H];
fragment I : [I];
fragment J : [J];
fragment K : [K];
fragment L : [L];
fragment M : [M];
fragment N : [N];
fragment O : [O];
fragment P : [P];
fragment Q : [Q];
fragment R : [R];
fragment S : [S];
fragment T : [T];
fragment U : [U];
fragment V : [V];
fragment W : [W];
fragment X : [X];
fragment Y : [Y];
fragment Z : [Z];
fragment CH : [A-Z];

