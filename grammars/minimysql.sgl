/*
MySQL (Positive Technologies) grammar
The MIT License (MIT).
Copyright (c) 2015-2017, Ivan Kochurkin (kvanttt@gmail.com), Positive Technologies.
Copyright (c) 2017, Ivan Khudyashev (IHudyashov@ptsecurity.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
grammar MiniMySQL;

alterTable
    : error['exist'] ALTER TABLE t = table.any
     ( alterSpecification )**random[1, 6, ',', 75] SC
    ;

fragment alterSpecification
    : 
    c=$column[t]
    ( 
        ADD COLUMN? new['column'] columnDefinition FIRST?    
        | ADD COLUMN? '(' (new['column'] columnDefinition)**random[1, 3, ',', 75] ')' 
        | DROP COLUMN? c.unique_any error['delete all', 'has a partitioning function dependency']
        | DROP PRIMARY KEY error['primary']
        | RENAME ( TO | AS ) new['table']
        | RENAME COLUMN c.unique_any TO new['column'] error['has a partitioning function dependency and cannot be dropped or renamed']
    )
    ;

fragment columnDefinition
    : ' FLOAT ' | ' INT ' | ' TEXT '
    ;

dropDatabase
    : DROP DATABASE ifExists DB = new['database'] SC
    ;

dropSchema
    : DROP SCHEMA ifExists DB SC
    ;


createDatabase
    : CREATE (DATABASE | SCHEMA) ifNotExists? DB SC
    ;

useDatabase
    : USE DB SC
    ;

createTable
    : CREATE error['A BLOB field is not allowed in partition function', 'is of a not allowed type for this type of partitioning'] 
      ( 90% ' '  | TEMPORARY error['Cannot create temporary table with partitions'] ) TABLE 
        ifNotExists? new['table']
        (
            90% LB ( cn+=new['column'] columnDefinition)**random[1, 5, ',', 30] RB 
            ( 80% ' '  |
                    ' ENGINE ' EQ (' MyISAM ' | ' InnoDB ' ) |
                    PARTITION BY (LINEAR)? error['allowed type']
                    ( 
                        'HASH(' cn.any ')' |
                        ' KEY ' ( 'ALGORITHM=' ('1'|'2'))? '(' cn.any ')'
                    )
            )
            | LIKE table.any
        )  SC
    ;

createIndex
    : error['used in key specification without a key length'] CREATE  
    ((
       49% UNIQUE error['Duplicate', 'A UNIQUE INDEX must include all columns in the '] | 
        49% FULLTEXT error['cannot be part of',' support FULLTEXT indexes'] | 
        error['A SPATIAL index may only contain a geometrical type column']  SPATIAL
    ) )**random[0, 1, 90]
    INDEX new['index']
    ON t=table.any c=$column[t] '(' ( c.unique_any )**random[1, 6, ',', 90] ')'
    (
        ALGORITHM EQ (DEFAULT | INPLACE | COPY)
        | LOCK EQ (DEFAULT | NONE | SHARED | EXCLUSIVE)
    ) error['is not supported']
    SC
    ;

truncateTable : TRUNCATE TABLE table.any SC ;
    
insertStatement
    : (REPLACE | INSERT ((LOW_PRIORITY | DELAYED | HIGH_PRIORITY))? IGNORE? ) INTO? error['Duplicate'] t=table.any
    '(' cl=$column[t] ( c+=cl.unique_any )**random[1, 6, ',', 75] ')' 
    VALUES '(' ( expression[c.next.type]  )**random[c.len,','] ')'
    SC
    ;

updateStatement
    : UPDATE error['Duplicate'] LOW_PRIORITY? IGNORE? t=table.any
    SET (cc=column[t].any '=' expression[cc.type])**random[1, 6, ',', 75] (WHERE (NOT)? cc=column[t].any '=' expression[cc.type])? SC
    ;

expression [type, depth=3]
    : int_expr <type=='int'>
    | text_expr <type=='text'> 
    | float_expr <type=='float'>
    | <depth>0> ( 
        least[type, depth$-1] 
        | greatest[type, depth$-1] 
        | if_func[type, depth$-1]
    )
    ;

selectStatement [rep=random[1,5,',']] returns [c] :
    @2
	SELECT (
        90% (   (tt=t.any DOT | tt=$t.any) c+=tt.c.unique_any
            | columnerrorxpression
        )**rep
        | ASTERISK
    ) 
    @1
	FROM ( tt=table.any tt.c=$column_name[tt] t+=$tt | '(' cc=selectStatement ')' AS tt=new['table'] tt.c=$cc t+=$tt)
	//no separate needed since it is directly positioned after the FROM clause
    (
		JOIN ( tt=table.any tt.c=$column_name[tt] t+=$tt | '(' cc=selectStatement ')' AS tt=new['table'] tt.c=$cc t+=$tt)
	)?
    @3
    where_predicate?
	( 
		( UNION | INTERSECT ) selectStatement[random[c.len,',']]
	)?
	;
	
where_predicate:
	WHERE predicate
	| WHERE c IN '(' selectStatement[1] ')'
	| WHERE NOT? EXISTS '(' selectStatement ')'
	;

predicate : ( 50%'(' pivot=$t.any.c.any ( expression[pivot] | (tt=t DOT | tt=$t )  cc=tt.c.filter[type==pivot.type].any ) 
                    comparison 
                    ( expression[cc] | (tt=t DOT | tt=$t )  cc=tt.c.filter[type==pivot.type].any ) ')' 
            | 30% ifnull 
            | if_func)
        ;

comparison : ( LT | GT | EQ | LT EQ | GT EQ );

waitNowaitClause
    : WAIT float_val
    | NOWAIT
    ;

abs : ' ABS(' (float_expr | int_expr ) ')' ;
bit_count : ' BIT_COUNT(' int_expr ')';
coalesce : ' COALESCE(' expression ( ',' expression )* ')';
if_func [type, depth] : ' IF(' ( expression[type, depth] comparison expression[type, depth] | ifnull[type, depth] ) ', ' expression[type, depth] ', ' expression[type, depth] ') '; 
ifnull [type, depth] : ' IFNULL(' expression[type, depth] ', ' expression[type, depth] ') ';
greatest [type, depth] : ' GREATEST(' expression[type, depth] ( ', ' expression[type, depth] )+ ') ';
least [type, depth] : ' LEAST(' expression[type, depth] ( ', ' expression[type, depth] )+ ') ';
strcmp : ' STRCMP(' text_expr ', ' text_expr ') ';
substr : ' SUBSTR(' text_expr ', ' int_expr ', ' int_expr ') ';
substring : ' SUBSTRING(' text_expr ', ' int_expr ', ' int_expr ') ';
trim : ' TRIM(' text_expr') ';
lcase : ' LCASE(' text_expr ') ';
ucase : ' UCASE(' text_expr ') ';
space : ' SPACE(' int_expr ') ';
last_insert_id : ' LAST_INSERT_ID() ';

float_expr : ( 50% float_val | abs  | NULL ) ;
float_val : int_val ('.' int_val )? ;
int_expr : ( 50% (DS)**random[0, 1] int_val | bit_count | strcmp | last_insert_id | NULL );
int_val :  (DIGIT)**random[1, 5] ;
text_expr : ( 70% text_val | substr | substring | lcase | ucase | space | trim | NULL );
text_val :  DQ ( (CH | DIGIT) )**random[1, 100] DQ ;

db returns [d] : d=$query['SHOW DATABASES;', 'Database'] ;
table returns [t] : t=$query['SHOW TABLES;', 'Tables_in_'$+DB];
column [t] returns [c] : c=$query['SHOW COLUMNS FROM '$+t, 'Field', 'Type', 'type'];
index [t] returns [i] : i=$query['SHOW INDEX FROM '$+t, 'Key_name'];


    
ifNotExists : IF NOT EXISTS;
ifExists : IF EXISTS;

ADD : SPACE A D D SPACE;
ALGORITHM : SPACE A L G O R I T H M SPACE;
ALTER : SPACE A L T E R SPACE;
AS : SPACE A S SPACE;
BY : SPACE B Y SPACE;
COLUMN : SPACE C O L U M N SPACE;
COPY : SPACE C O P Y SPACE;
CREATE : SPACE C R E A T E SPACE;
DATABASE : SPACE D A T A B A S E SPACE;
DEFAULT : SPACE D E F A U L T SPACE;
DELAYED : SPACE D E L A Y E D SPACE;
DROP : SPACE D R O P SPACE;
EXCLUSIVE : SPACE E X C L U S I V E SPACE;
EXISTS : SPACE E X I S T S SPACE;
FIRST : SPACE F I R S T SPACE;
FLOAT : SPACE F L O A T SPACE;
FROM : SPACE F R O M SPACE;
FULLTEXT : SPACE F U L L T E X T SPACE;
HASH : SPACE H A S H SPACE;
HIGH_PRIORITY : SPACE H I G H US P R I O R I T Y SPACE;
IF : SPACE I F SPACE;
IGNORE : SPACE I G N O R E SPACE;
INDEX : SPACE I N D E X SPACE;
INPLACE : SPACE I N P L A C E SPACE;
INSERT : SPACE I N S E R T SPACE;
INT : SPACE I N T SPACE;
INTO : SPACE I N T O SPACE;
KEY : SPACE K E Y SPACE;
LIKE : SPACE L I K E SPACE;
LINEAR : SPACE L I N E A R SPACE;
LOCK : SPACE L O C K SPACE;
LOW_PRIORITY : SPACE L O W US P R I O R I T Y SPACE;
NONE : SPACE N O N E SPACE;
NOT : SPACE N O T SPACE;
NOWAIT : SPACE N O W A I T SPACE;
NULL : SPACE N U L L SPACE;
OFFLINE : SPACE O F F L I N E SPACE;
ON : SPACE O N SPACE;
ONLINE : SPACE O N L I N E SPACE;
PARTITION : SPACE P A R T I T I O N SPACE;
PRIMARY : SPACE P R I M A R Y SPACE;
RENAME : SPACE R E N A M E SPACE;
REPLACE : SPACE R E P L A C E SPACE;
SCHEMA : SPACE S C H E M A SPACE;
SELECT : SPACE S E L E C T SPACE;
SET : SPACE S E T SPACE;
SHARED : SPACE S H A R E D SPACE;
SPATIAL : SPACE S P A T I A L SPACE;
TABLE : SPACE T A B L E SPACE;
TEMPORARY : SPACE T E M P O R A R Y SPACE;
TEXT : SPACE T E X T SPACE;
TO : SPACE T O SPACE;
TRUNCATE : SPACE T R U N C A T E SPACE;
UNIQUE : SPACE U N I Q U E SPACE;
UPDATE : SPACE U P D A T E SPACE;
USE : SPACE U S E SPACE;
VALUES : SPACE V A L U E S SPACE;
VIEW : SPACE V I E W SPACE;
WAIT : SPACE W A I T SPACE;
WHERE : SPACE W H E R E SPACE;


STUB : SPACE S T U B SPACE;



LB : '(';
RB : ')';
LT : '<';
GT : '>';
EQ : '=';
SC : ';';
US : '_';
DS : '-';
ASTERISK : '*';
DQ : '\"';
COMMA : ',';

fragment DIGIT : [0-9];
fragment SPACE : [\u0020];
fragment NL : [\n];
fragment A : [A];
fragment B : [B];
fragment C : [C];
fragment D : [D];
fragment E : [E];
fragment F : [F];
fragment G : [G];
fragment H : [H];
fragment I : [I];
fragment J : [J];
fragment K : [K];
fragment L : [L];
fragment M : [M];
fragment N : [N];
fragment O : [O];
fragment P : [P];
fragment Q : [Q];
fragment R : [R];
fragment S : [S];
fragment T : [T];
fragment U : [U];
fragment V : [V];
fragment W : [W];
fragment X : [X];
fragment Y : [Y];
fragment Z : [Z];
fragment CH : [A-Z];

