package sqlancer.any;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import java.util.Arrays;

import java.lang.IllegalArgumentException;
import java.lang.NumberFormatException;
import sqlancer.SQLConnection;
import java.sql.*;
public class Fuzzer{
    public static class UnavailableException extends Exception {
        private static final long serialVersionUID = 1L;
        public boolean isUndefined; //the variable/attr requested does not exist
        public boolean isUninitialized; //the variable/attr requests exists but has no value associated
        public boolean isOut; //the variable/attr requested exists but is insufficient in numbers (no more unique ones exists)
        public UnavailableException(String message, boolean isUndefined, boolean isUninitialized, boolean isOut){
            super(message);
            this.isUndefined = isUndefined;
            this.isUninitialized = isUninitialized;
            this.isOut = isOut;
        }
    }

    public static class DeadEndException extends Exception {
        private static final long serialVersionUID = 1L;
        public DeadEndException(String message){
            super(message);
        }
    }

    public static class Rand{
        public static <T> T random_from_list(List<T> l){
            int idx = (int)(Math.random()*l.size());
            return l.get(idx);
        }
        public static <T> T random_from_list_weighted(List<T> l, List<Integer> weights) throws DeadEndException{
            int total = 0;
            if (l.size()==0){
                throw new DeadEndException("Rand::random_from_list_weighted : no available options");
            }
            for (int w: weights){
                total = total + w;
            }
            total = (int)(total * Math.random());
            for (int i=0; i<l.size(); i++){
                if (total<weights.get(i)){
                    return l.get(i);
                }
                total = total - weights.get(i);
            }
            return l.get(l.size()-1);
        }
        public static int random(int min, int max){
            return (int)(min + (max-min+1)*Math.random());
        }
    }

    public static class Buffer {
        private String content; //only for terminals
        //only for non-terminals, or temporary leaf-nodes whose children are not yet built
        private List<Buffer> children; 

        public Buffer(){
            this.content = null;
            this.children = new ArrayList<>();
        }

        public Buffer(String content){
            if (content==null){
                throw new IllegalArgumentException("ERROR : Buffer::Buffer : Terminal buffer nodes should not have null content. For a placeholder, use empty string \"\" instead");
            }
            this.content = content;
        }

        public void add(Buffer child){
            this.children.add(child);
        }

        public Variable add(Variable terminal) throws Exception{
            if (terminal==null || !terminal.isSingleValued){
                return terminal;
            }
            this.children.add(new Buffer(terminal.getValue()));
            return terminal;
        }

        public void set(int index, Buffer child){
            while (this.children.size()<=index){
                this.children.add(new Buffer());
            }
            this.children.set(index, child);
        }

        public int size(){
            return this.children==null ? 0 : this.children.size() ;
        }

        public Buffer remove(int idx) throws Exception{
            if (this.children==null){
                throw new Exception("Buffer::remove : remove cannot be called on a terminal node");
            }
            if (idx>=this.children.size()){
                throw new Exception("Buffer::remove : invalid index "+idx+", children size "+this.children.size());
            }
            return this.children.remove(idx);
        }
        public String toString(){
            if (this.content!=null){
                return this.content;
            }
            String res = "";
            for (Buffer child : this.children){
                res = res + child.toString();
            }
            return res;
        }

    }

    public static class Context {
        //global variables
        private HashMap<String, Variable> globalSymbols = new HashMap<>();
        //local variables
        private HashMap<String, Variable> symbols;
        private List<HashMap<String, Variable>> symbolStack;
        private List<Variable> args;
        private List<String> errors;
        //return value from a grammar function call
        private Variable result;
        //JDBC connection to the DB under test, only used by the query built-in function
        private SQLConnection conn;
        //This is the list of supported operators by SGL
        public static final List<String> OPERATORS = Collections.unmodifiableList(Arrays.asList("=", "+=", "$+", "$-", "==", "!=", ">", "<", ">=", "<="));
        //used by the "new" function for making sure all symbols in the target language scope is unique
        //for example, the first call to new["table"] will return 'table1', second call will be 'table2' and so on
        private HashMap<String, Integer> idCount; 
        
        private static List<String> rules = new ArrayList<>();

        public static void add_rule(String name){
            rules.add(name);
        }


        public Context(SQLConnection conn){
            this.symbols = new HashMap<>();
            this.symbolStack = new ArrayList<>();
            this.errors = new ArrayList<>();
            this.conn = conn;
            this.idCount = new HashMap<>();
        }

        public void addError(Variable v) throws Exception{
            try {
                this.errors.add(v.getValue());
            }
            catch (IllegalArgumentException e){
                throw new java.lang.IllegalArgumentException("ERROR: Fuzzer.Context.addError :: variable passed to expected error declaration is not single-valued, check your expected error declarations", e);
            }
        }

        //the calling convention in SGL is:
        //The caller evaluates the arguments and pass its own buffer, the name of the callee, and the arguments here
        //This function will will push the passed arguments to this.args (think arguments passed using registers)
        //Then the control is passed to the callee
        //If the function is not a fragment
        //The callee will create a new stack frame of its own
        //arg_decls will first be evaluated in the callee frame (which is empty up until now)
        //Then the callee will use enter() to move the arguments to its own stack frame (only itself knows how to do that)
        //After completing its business, the callee will push its return value to this.result (again, think register) and restore the stack frame for caller
        //The call() function will add the returned buffer to the caller one and return this.result (so that the behavior is consistent)
        public Variable call(Buffer buf, String rule, List<Variable> args) throws Exception{
            this.push_args(args);
            buf.add(Fuzzer.dispatch(this, rule));
            return this.result;
        }

        public void push_args(List<Variable> args){
            this.args = args;
        }

        public void push_frame(){
            HashMap<String, Variable> newFrame = new HashMap<>();
            //preserve current symbols
            this.symbolStack.add(this.symbols);
            this.symbols = newFrame;

            //set the return value to null to avoid confusion
            this.result = null;
        }
        // arg_decls is the parameter list declared in the lhs of the current/callee rule
        // it will first be evaluated in the callee frame (which is empty up until now)
        // in this pass, the variables without default values will be assigned with placeholders
        // those with default values will be assigned with their corrsponding defaults
        // then a second pass will assign the passed arguments positionally, overwriting exisiting placeholders and defaults
        // finally, we will check for placeholders in the parameter list
        // If any is found, then we will throw an exception as it is not covered by either default or passed
        public void enter(List<Variable> arg_decls) throws Exception{
            if (args!=null && args.size()>0){
                if (args.size()>arg_decls.size()){
                    throw new IllegalArgumentException("Fuzzer.Context.enter :: size of provided argument list exceeds that in the rule signature");
                }
                for (int i=0; i<this.args.size(); i++){
                    arg_decls.get(i).clone(this.args.get(i));    
                }
            }
            for (Variable v : arg_decls){
                if (v.isPlaceHolder()){
                    throw new IllegalArgumentException("Fuzzer.Context.enter :: an argument must either be assigned through default value or passed parameter");
                }
            }
            this.args = null;
        }


        public void ret(Variable result) throws Exception{
            //move the return value into the cache slot
            this.result= result;

            //restore context for caller
            this.symbols = this.symbolStack.get(this.symbolStack.size()-1);
            this.symbolStack.remove(this.symbolStack.size()-1);
        }


        // the symbol here might be either a variable or a function
        // that is why the args arg this there, it won't even be looked at if it is actually a variable
        public Variable getSymbol(Buffer buf, String symbol, List<Variable> args) throws Exception{
            if (symbol==null){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.getSymbol :: the symbol accessed is null, check your grammar");
            }
            if (symbol.equals("query")){
                return this.query(args);
            }
            if (symbol.equals("random")){
                return this.random(args);
            }
            if (symbol.equals("error")){
                return this.addExpectedError(args);
            }
            if (symbol.equals("new")){
                return this.new_id(args);
            }
            if (rules.contains(symbol)){
                return this.call(buf, symbol, args);
            }
            if (this.symbols.get(symbol)==null && this.globalSymbols.get(symbol)==null){
                if (Character.isUpperCase(symbol.charAt(0))){
                    this.globalSymbols.put(symbol, Variable.placeholder());
                }
                else if (Character.isLowerCase(symbol.charAt(0))){
                    this.symbols.put(symbol, Variable.placeholder());
                }
                else {
                    throw new Exception("Variable.getSymbol : a user-defined symbol must start with either lower case letter (local) or upper case letter (global)");
                }
            }
            return this.symbols.get(symbol)==null ? this.globalSymbols.get(symbol) : this.symbols.get(symbol);
        }

        //random generator 
        // handles the following cases
        //random[fix_number, delimiter]
        //random[min, max]
        //random[min, delimiter, decay_spec]
        //random[min, max, delimiter]
        //random[min, max, delimiter, decay_spec]
        // decay_spec should be an interger ranging 0 to 99, default 50
        // 0 for uniform distribution, uniform distribution without a max is not allowed
        // Otherwise, the probability of getting x is (decay_spec/100)*(1-decay_spec/100)^(x-1)
        public Variable random(List<Variable> args) throws Exception{
            try{
                if (args.size()==2){
                    //random[fix, delimiter]
                    if (args.get(0).isNumerical() && args.get(1).isString()){
                        int val = args.get(0).getNumerical();
                        String delimiter = args.get(1).getValue();
                        Variable res = Variable.factory(val);
                        res.setAttr("delimiter", Variable.factory(delimiter));
                        return res;
                    }
                    //random[min, max]
                    if (args.get(0).isNumerical() && args.get(1).isNumerical()){
                        int min = args.get(0).getNumerical();
                        int max = args.get(1).getNumerical();
                        double dr = 0.5;
                        int val = min;
                        while (true){
                            if (Math.random()<dr){
                                break;
                            }
                            val++;
                            //wrap around when overflow
                            if (val>max){
                                val = min;
                            }
                        }
                        return Variable.factory(val);
                    }
                }
                if (args.size()==3){
                    //random[min, delimiter, decay_spec]
                    if (args.get(0).isNumerical() && args.get(1).isString() && args.get(2).isNumerical()){
                        int min = args.get(0).getNumerical();
                        String delimiter = args.get(1).getValue();
                        int ds = args.get(2).getNumerical();
                        if (ds==0){
                            throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: random function cannot be called with no max AND uniform distribution");
                        }
                        if (ds>99 || ds<0){
                            throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: unrecognizable decay_spec, accepted value are integers in range [0,99]");
                        }
                        int val = min;
                        double dr = ds/100.0;
                        while (true){
                            if (Math.random()<dr){
                                break;
                            }
                            val++;
                        }
                        Variable res = Variable.factory(val);
                        res.setAttr("delimiter", Variable.factory(delimiter));
                        return res;
                    }
                    //random[min,max,decay_spec]
                    if (args.get(0).isNumerical() && args.get(1).isNumerical() && args.get(2).isNumerical()){
                        int min = args.get(0).getNumerical();
                        int max = args.get(1).getNumerical();
                        int ds = args.get(2).getNumerical();
                        if (ds==0){
                            throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: random function cannot be called with no max AND uniform distribution");
                        }
                        if (ds>99 || ds<0){
                            throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: unrecognizable decay_spec, accepted value are integers in range [0,99]");
                        }
                        int val = min;
                        double dr = ds/100.0;
                        while (true){
                            if (Math.random()<dr){
                                break;
                            }
                            val++;
                            //wrap around when overflow
                            if (val>max){
                                val = min;
                            }
                        }
                        Variable res = Variable.factory(val);
                        return res;
                    }
                }
                if (args.size()==4){
                    if (args.get(0).isNumerical() && args.get(1).isNumerical() && args.get(2).isString() && args.get(3).isNumerical()){
                        int min = args.get(0).getNumerical();
                        int max = args.get(1).getNumerical();
                        String delimiter = args.get(2).getValue();
                        int ds = args.get(3).getNumerical();
                        if (ds>99 || ds<0){
                            throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: unrecognizable decay_spec, accepted value are integers in range [0,99]");
                        }
                        int val = min;
                        if (ds==0){
                            val += (int)((max-min+1)*Math.random());
                        }
                        else {
                            double dr = ds/100.0;
                            while (true){
                                if (Math.random()<dr){
                                    break;
                                }
                                val++;
                                //wrap around when overflow
                                if (val>max){
                                    val = min;
                                }
                            }
                        }
                        Variable res = Variable.factory(val);
                        res.setAttr("delimiter", Variable.factory(delimiter));
                        return res;
                    }
                }
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: Expecting 2, 3, or 4 arguments, got "+args.size());
            }
            catch (IllegalArgumentException e){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.random :: arguments passed do not match any know signatures\n"+
                                                    "random[fix_number, delimiter]\n" + 
                                                    "random[min, max]\n" +
                                                    "random[min, delimiter, decay_spec]\n" + 
                                                    "random[min, max, delimiter]\n" +
                                                    "random[min, max, delimiter, decay_spec]\n" + 
                                                    "decay_spec should be an interger ranging 0 to 99, default 50\n" + 
                                                    "0 for uniform distribution, uniform distribution without a max is not allowed\n", e);
            }
        }

        //returning a variable object containing an empty string since
        //all calls to a function is expected to return something
        //so we are using this as a placeholder
        public Variable addExpectedError(List<Variable> args) throws Exception{
            for (Variable arg : args){
                this.errors.add(arg.getValue());
            }
            return Variable.factory("");
        }

        //
        public Variable eval(Variable a, String operator, Variable b) throws Exception{
            if (operator==null){
                throw new IllegalArgumentException("ERROR : Variable.eval :: operator cannot be null");
            }
            //this is for the author's own use
            //if an operator is illegal, it shouldn't be recognized by the parser in the first place
            //this almost for sure means there is some kinda implementation error
            if (!OPERATORS.contains(operator)){
                throw new IllegalArgumentException("ERROR : Context.eval :: "+operator+" is not a recognized operator. Internal error, you shouldn't have reached here.");
            }
            if (operator.equals("=")){
                a.clone(b);
                return a;
            }
            if (operator.equals("+=")){
                a.addEntry(b);
                return b;
            }
            if (operator.equals("$+")){
                if (a.isNumerical() && b.isNumerical()){
                    return Variable.factory(a.getNumerical() + b.getNumerical());
                }
                return Variable.factory(a.getValue()+b.getValue());
            }
            if (operator.equals("$-")){
                if (a.isNumerical() && b.isNumerical()){
                    if (a.getNumerical() - b.getNumerical() < 0){
                        throw new Exception("ERROR : Context.eval :: Integer underflow, negative values are not supported in SGL");
                    }
                    return Variable.factory(a.getNumerical() - b.getNumerical());
                }
                throw new IllegalArgumentException("ERROR : Context.eval :: the operator \"-\" is not applicable when either side of the operation is not numerical");
            }
            return Variable.factory(a.compare(operator, b));
        }


        public void setSymbol(String symbol, Variable v) throws Exception{
            if (symbol==null || symbol.length()==0 || !((symbol.charAt(0)>=65 && symbol.charAt(0)<=90) || (symbol.charAt(0)>=97 && symbol.charAt(0)<=122))){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.setSymbol :: symbol must be non-empty and start with an ASCII letter");
            }
            if (Fuzzer.rules.contains(symbol)){
                throw new Exception("Context::setSymbol : symbol conflict with rule "+symbol);
            }
            // starts with a capital letter
            if (symbol.charAt(0)<92){
                this.globalSymbols.put(symbol, v);
            }
            else {
                this.symbols.put(symbol, v);
            }
        }
        //requires 2 or more arguments
        //the 
        public Variable query(List<Variable> args) throws Exception{
            if (this.conn==null){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.query :: JDBC Connection to target DBMS is not set or set to null, query function not available");
            }
            if (args.size()<2){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.query :: a call to the query function must contain at least 2 arguments: query and column name");
            }
            String query = args.get(0).getValue();
            String col = args.get(1).getValue();
            Variable v = Variable.factory();
            ResultSet rs = this.conn.createStatement().executeQuery(query);
            while (rs.next()){
                Variable r = Variable.factory(rs.getString(col));
                for (int i=2; i<args.size(); i++){
                    Variable pair = args.get(i);
                    String attrCol = pair.getEntry(0).getValue();
                    String attr = pair.getEntry(1).getValue();
                    r.setAttr(attr, Variable.factory(rs.getString(attrCol)));
                }
                v.addEntry(r);
            }
            return v;
        }
        //for the "new" built-in function 
        public Variable new_id(List<Variable> args) throws Exception{
            if (args.size()!=1){
                throw new IllegalArgumentException("ERROR : Fuzzer.Context.new_id :: a call to the new function expects exactly 1 argument: the prefix of the id to be generated");
            }
            String prefix = args.get(0).getValue();
            if (this.idCount.containsKey(prefix)){
                this.idCount.put(prefix, this.idCount.get(prefix)+1);
            }
            else {
                this.idCount.put(prefix, 1);
            }
            return new Variable(prefix+this.idCount.get(prefix));
        }
    }

    public static class Variable {
        public boolean isSingleValued;
        private String value;
        private int numerical;
        private boolean bool;
        private boolean containsNumerical;
        private boolean containsBoolean;
        private boolean containsString;
        private List<Variable> entries;
        private List<Integer> uniqueUsageCount;
        private HashMap<String, Variable> attributes;
        private int cursor; //non-decreasing, modulus entries.size() will be used for extracting index 
        private boolean isUninitialized;

        public static final List<String> RESERVED_ATTR = Collections.unmodifiableList(Arrays.asList("new", "any", "next", "len", "unique_any", "query", "filter", "cur"));
        
        private Variable(){
            this.isSingleValued = false;
            this.containsNumerical = false;
            this.containsBoolean = false;
            this.containsString = false;
            this.entries = new ArrayList<>();
            this.uniqueUsageCount = new ArrayList<>();
            this.attributes = new HashMap<>();
            this.cursor = 0;
            this.isUninitialized = false;
        }
        private Variable(String value){
            this.value = value;
            this.isSingleValued = true;
            this.containsNumerical = false;
            this.containsBoolean = false;
            this.containsString = true;
            this.entries = new ArrayList<>();
            this.uniqueUsageCount = new ArrayList<>();
            this.attributes = new HashMap<>();
            this.cursor = 0;
            this.isUninitialized = false;
        }
        private Variable(int numerical){
            this.value = ""+numerical;
            this.numerical = numerical;
            this.isSingleValued = true;
            this.containsNumerical = true;
            this.containsBoolean = false;
            this.containsString = false;
            this.entries = new ArrayList<>();
            this.uniqueUsageCount = new ArrayList<>();
            this.attributes = new HashMap<>();
            this.cursor = 0;
            this.isUninitialized = false;
        }
        private Variable(boolean bool){
            this.value = ""+bool;
            this.bool = bool;
            this.isSingleValued = true;
            this.containsNumerical = false;
            this.containsBoolean = true;
            this.containsString = false;
            this.entries = new ArrayList<>();
            this.uniqueUsageCount = new ArrayList<>();
            this.attributes = new HashMap<>();
            this.cursor = 0;
            this.isUninitialized = false;
        }

        //just need a new signature, those arguments are not actually used
        private Variable(boolean placeholder, boolean p){
            this.isUninitialized = true;
        }
        //by returning this at the end of the setter, we can use this class in an FP way
        public Variable setAttr(String attr_name, Variable value) throws IllegalArgumentException{
            if (RESERVED_ATTR.contains(attr_name)){
                throw new IllegalArgumentException("ERROR: "+attr_name+" is a reserved attribute name, please use another name instead");
            }
            this.attributes.put(attr_name, value);
            return this;
        }

        // factory method for a Variable of list type
        public static Variable factory(){
            return new Variable();
        }

        // factory method for a Variable of string type
        public static Variable factory(String value){
            return new Variable(value);
        }

        // factory method for a Variable of numerical type
        public static Variable factory(int numerical){
            return new Variable(numerical);
        }

        // factory method for a Variable of boolean type
        public static Variable factory(boolean bool){
            return new Variable(bool);
        }

        // factory method for a placeholder Variable
        public static Variable placeholder(){
            return new Variable(true, true);
        }
        
        //make the current variable a shallow-copy of other
        //the cursor will be set to 0
        //mainly used for assignment (i.e. a=b will be context.getSymbol("a").clone(context.getSymbol("b")))
        @SuppressWarnings("unused")
        public void clone(Variable other) throws Exception{
            if (other.isUninitialized){
                throw new UnavailableException("An uninitialized variable should not be cloned, check your grammar file for assignments using these", false, true, false);
            }
            this.isUninitialized = false;
            this.isSingleValued = other.isSingleValued;
            this.value = other.value;
            this.numerical = other.numerical;
            this.bool = other.bool;
            this.containsNumerical = other.containsNumerical;
            this.containsBoolean = other.containsBoolean;
            this.entries = copy_list(other.entries);
            this.uniqueUsageCount = new ArrayList<>();
            for (Variable v: this.entries){
                this.uniqueUsageCount.add(0);
            }
            this.attributes = copy_map(other.attributes);
            this.cursor = 0;
        }
        
        // new, query, getColumn, withColumnAsAttr will not be handled as those are not attributes but functions
        // those will be implemented in the Context class
        public Variable getAttr(String name, List<Variable> args) throws Exception{
            if (name.equals("any")){
                if (this.isSingleValued){
                    throw new IllegalArgumentException("Fuzzer.Variable.getAttr :: attribute any is not applicable to single-valued variables");
                }
                if (this.entries.size()==0){
                    throw new UnavailableException("", false, true, false);
                }
                return Rand.random_from_list(entries);
            }
            else if (name.equals("unique_any")){
                if (this.isSingleValued){
                    throw new IllegalArgumentException("Fuzzer.Variable.getAttr :: attribute unique_any is not applicable to single-valued variables");
                }
                if (this.entries.size()==0){
                    throw new UnavailableException("", false, true, false);
                }
                List<Integer> avail_idx = new ArrayList<>();
                for (int i=0; i<this.uniqueUsageCount.size(); i++){
                    if (this.uniqueUsageCount.get(i)==0){
                        avail_idx.add(i);
                    }
                }
                if (avail_idx.size()==0){
                    throw new UnavailableException("", false, false, true);
                }
                int idx = Rand.random_from_list(avail_idx);
                this.uniqueUsageCount.set(idx, 1);
                return this.entries.get(idx);
            }
            else if (name.equals("len")){
                if (this.isSingleValued){
                    return new Variable(1);
                }
                return new Variable(this.entries.size());
            }
            else if (name.equals("next")){
                if (this.isSingleValued){
                    throw new IllegalArgumentException("Fuzzer.Variable.getAttr :: attribute next is not applicable to single-valued variables");
                }
                if (this.entries.size()==0){
                    throw new UnavailableException("", false, true, false);
                }
                this.cursor += 1;
                return this.entries.get((this.cursor-1)%this.entries.size());
            }
            else if (name.equals("cur")){
                if (this.isSingleValued){
                    throw new IllegalArgumentException("Fuzzer.Variable.getAttr :: attribute cur is not applicable to single-valued variables");
                }
                if (this.entries.size()==0){
                    throw new UnavailableException("", false, true, false);
                }
                return this.entries.get(this.cursor%this.entries.size());
            }
            else if (name.equals("filter")){
                if (args.size()!=3){
                    throw new IllegalArgumentException("Fuzzer.Variable.getAttr :: filter function expects 3 arguments: attribute to be filtered, comparator, and a pivot value. "+args.size()+" are given");
                }
                return this.filter(args.get(0), args.get(1).getValue(), args.get(2));
            }
            if (this.attributes.get(name)==null){
                this.attributes.put(name, Variable.placeholder());
            }
            return this.attributes.get(name);

        }
        private Variable filter(Variable attr, String comparator, Variable target) throws Exception{
            if (this.isSingleValued){
                throw new IllegalArgumentException("Fuzzer.Variable.filter :: filter operation is not allowed on single-valued variables");
            }
            Variable result = new Variable();
            for (Variable v : this.entries){
                if (v.getAttr(attr.getValue(), null).compare(comparator, target)){
                    result.addEntry(v);
                }
            }
            return result;
        }
        public boolean compare(String comparator, Variable other) throws Exception{
            if (comparator.equals("==")){
                return this.equals(other);
            }
            if (comparator.equals("!=")){
                return !this.equals(other);
            }

            if (comparator.equals(">=")){
                try {
                    Integer operand_a = Integer.valueOf(this.value);
                    Integer operand_b = Integer.valueOf(other.value);
                    return operand_a.intValue()>=operand_b.intValue();
                }
                catch (NumberFormatException e){
                    throw new NumberFormatException(
                        "Fuzzer.Variable.compare :: >= comparator expects both variables to contain numerical value\n"+e.getMessage()
                    );
                }
            }
            if (comparator.equals("<=")){
                try {
                    Integer operand_a = Integer.valueOf(this.value);
                    Integer operand_b = Integer.valueOf(other.value);
                    return operand_a.intValue()<=operand_b.intValue();
                }
                catch (NumberFormatException e){
                    throw new NumberFormatException(
                        "Fuzzer.Variable.compare :: <= comparator expects both variables to contain numerical value\n"+e.getMessage()
                    );
                }
            }
            if (comparator.equals(">")){
                try {
                    Integer operand_a = Integer.valueOf(this.value);
                    Integer operand_b = Integer.valueOf(other.value);
                    return operand_a.intValue()>operand_b.intValue();
                }
                catch (NumberFormatException e){
                    throw new NumberFormatException(
                        "Fuzzer.Variable.compare :: > comparator expects both variables to contain numerical value\n"+e.getMessage()
                    );
                }
            }
            if (comparator.equals("<")){
                try {
                    Integer operand_a = Integer.valueOf(this.value);
                    Integer operand_b = Integer.valueOf(other.value);
                    return operand_a.intValue()<operand_b.intValue();
                }
                catch (NumberFormatException e){
                    throw new NumberFormatException(
                        "Fuzzer.Variable.compare :: < comparator expects both variables to contain numerical value\n"+e.getMessage()
                    );
                }
            }
            throw new IllegalArgumentException("Fuzzer.Variable.compare :: comparator "+comparator+" is not recognizable");
        }

        //getValue returns the content of the current variable regardless if it is of string type or not
        //roughly equals to toString
        public String getValue() throws Exception{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.getValue :: the current variable is not initialized", false, true, false);
            }
            if (!this.isSingleValued){
                throw new IllegalArgumentException("Fuzzer.Variable.getValue :: getValue is not applicable to multi-valued variable");
            }
            return this.value;
        }

        public boolean isString() throws UnavailableException{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.isString :: the current variable is not initialized", false, true, false);
            }
            return this.containsString;
        }

        public boolean isPlaceHolder(){
            return this.isUninitialized;
        }
        public boolean isNumerical() throws UnavailableException{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.isNumerical :: the current variable is not initialized", false, true, false);
            }
            return this.containsNumerical;
        }

        public int getNumerical() throws UnavailableException{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.getNumerical :: the current variable is not initialized", false, true, false);
            }
            return this.numerical;
        }
        public boolean isBoolean() throws UnavailableException{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.isBoolean :: the current variable is not initialized", false, true, false);
            }
            return this.containsBoolean;
        }
        public boolean getBoolean() throws UnavailableException{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.getBoolean :: the current variable is not initialized", false, true, false);
            }
            if (!this.containsBoolean){
                throw new IllegalArgumentException("Fuzzer.Variable.getBoolean :: the current variable is not a boolean one");
            }
            return this.bool;
        }

        //by returning this at the end of the setter, we can use this class in an FP way
        public Variable addEntry(Variable v) throws Exception{
            if (this.isUninitialized){
                this.clone(factory());
            }
            if (this.isSingleValued){
                throw new IllegalArgumentException("Fuzzer.Variable.addEntry :: addEntry is not applicable to single-valued variable");
            }
            this.entries.add(v);
            this.uniqueUsageCount.add(0);
            return this;
        }
        public Variable getEntry(int idx)throws Exception{
            if (this.isUninitialized){
                throw new UnavailableException("Fuzzer.Variable.getEntry :: the current variable is not initialized", false, true, false);
            }
            if (this.isSingleValued){
                throw new IllegalArgumentException("Fuzzer.Variable.getEntry :: addEntry is not applicable to single-valued variable");
            }
            return this.entries.get(idx);
        }
        // making sure this.value and this.entries are the same
        // does not check for reference counters and cursor (differences in those will be considered as same variable in different state)
        @Override
        public boolean equals(Object another){
            if (another instanceof Variable){
                Variable other = (Variable)another;
                if (this.value==other.value || (this.value!=null && this.value.equals(other.value))){
                    if (this.entries.size()==other.entries.size()){
                        for (int i=0; i<this.entries.size(); i++){
                            if (!this.entries.get(i).equals(other.entries.get(i))){
                                return false;
                            }
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        public static <T> List<T> copy_list(List<T> ori){
            if (ori==null){
                return null;
            }
            List<T> res = new ArrayList<>();
            for (T item: ori){
                res.add(item);
            }
            return res;
        }
    
        public static <T, U> HashMap<T, U> copy_map(HashMap<T, U> ori){
            if (ori==null){
                return null;
            }
            HashMap<T, U> res = new HashMap<>();
            for (HashMap.Entry<T, U> entry: ori.entrySet()){
                res.put(entry.getKey(), entry.getValue());
            }
            return res;
        }
    }

    public static class CharSet{
        // Implementation acquired from https://stackoverflow.com/q/220547
        // with modifications
        public static boolean is_printable(char c){
            Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
            return c==0 || //Allows for generating null bytes
                    "\r\t\n".contains(""+c) || 
                    (
                        (!Character.isISOControl(c)) &&
                        block != null &&
                        block != Character.UnicodeBlock.SPECIALS
                    );
        }

        // return the ranges of printable characters (represented as Integers)
        // between a lower bound and an upper bound (upper bound not inclusive)
        // The length of the result List is guaranteed to be even
        // The values stored at even indices represents the beginning of a range (inclusive)
        // The value stored after that represents the end of that range (not inclusive)
        public static List<Integer> printable_ranges(int lower_bound, int upper_bound) throws Exception{
            if (lower_bound<0 || upper_bound<0 || upper_bound<lower_bound){
                throw new Exception("AstUtils::printable_ranges : invalid range "+lower_bound+", "+upper_bound);
            }
            List<Integer> ranges = new ArrayList<Integer>();
            int start = -1;
            for (int i=lower_bound; i<upper_bound; i++){
                if (start==-1 && is_printable((char)i)){
                    start = i;
                }
                else if (start!=-1 && !is_printable((char)i)){
                    ranges.add(start);
                    ranges.add(i);
                    start = -1;
                }
            }

            if (start!=-1){
                ranges.add(start);
                ranges.add(upper_bound);
            }

            return ranges;
        }
        public static int get_random_character_from_set(List<Integer> set) throws Exception{
            if (set.size()==0){
                throw new Exception("CharSet::get_random_character_from_set : Cannot handle empty set");
            }
            if (set.size()%2!=0){
                throw new Exception("CharSet::get_random_character_from_set : size of the set must be even, actual size: "+set.size());
            }
    
            //randomly select a range
            int ranges = set.size()/2;
            int range = (int)(Math.random()*ranges);
            int start = set.get(range*2);
            int end = set.get(range*2+1);
    
            //return a random number from that range
            return (int)(Math.random()*(end-start)+start);
        }
    }

    public static class Options {
        private List<Integer> indices;
        private List<Double> weights;
        public Options(){
            this.indices = new ArrayList<>();
            this.weights = new ArrayList<>();
        }
        public void addOption(int index, double weight){
            this.indices.add(index);
            this.weights.add(weight);
        }

        public int randomly() throws DeadEndException{
            double total = 0;
            if (indices.size()==0){
                throw new DeadEndException("Options::randomly : no available options");
            }
            for (double w: this.weights){
                total = total + w;
            }
            total = total * Math.random();
            for (int i=0; i<this.indices.size(); i++){
                if (total<this.weights.get(i)){
                    return this.indices.get(i);
                }
                total = total - this.weights.get(i);
            }
            return this.indices.get(this.indices.size()-1);
        }
    }

    public static class Stages {
        private List<List<String>> rules;
        private List<List<Integer>> weights;
        private List<List<Integer>> counts;
        private int tickets_current_stage;
        private int current_stage;
        public Stages(){
            this.tickets_current_stage = -1;
            this.current_stage = 0;
            this.rules = new ArrayList<>();
            this.weights = new ArrayList<>();
            this.counts = new ArrayList<>();
            List<String> rule = new ArrayList<>();
            List<Integer> weight = new ArrayList<>();
            List<Integer> count = new ArrayList<>();
                 // STAGE: dropDatabase
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("dropDatabase");
             weight.add(1);
             count.add(1);
             count.add(1);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: dropSchema
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("dropSchema");
             weight.add(1);
             count.add(1);
             count.add(1);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: createDatabase
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("createDatabase");
             weight.add(1);
             count.add(1);
             count.add(1);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: useDatabase
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("useDatabase");
             weight.add(1);
             count.add(1);
             count.add(1);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: create
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("createTable");
             weight.add(1);
             count.add(50);
             count.add(300);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: insert
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("insertStatement");
             weight.add(1);
             count.add(500);
             count.add(1500);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: update
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("updateStatement");
             weight.add(1);
             count.add(100);
             count.add(500);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);
                 // STAGE: mix
             rule = new ArrayList<>();
             weight = new ArrayList<>();
             count = new ArrayList<>();
             rule.add("alterTable");
             rule.add("createTable");
             rule.add("insertStatement");
             rule.add("updateStatement");
             rule.add("truncateTable");
             rule.add("createIndex");
             weight.add(1);
             weight.add(2);
             weight.add(5);
             weight.add(5);
             weight.add(1);
             weight.add(2);
             count.add(500);
             count.add(1500);
             rules.add(rule);
             weights.add(weight);
             counts.add(count);

        }

        public String get_next_rule() throws Exception{
            if (this.current_stage>=this.rules.size()){
                return null;
            }
            if (this.tickets_current_stage==-1){
                List<Integer> count = this.counts.get(this.current_stage);
                this.tickets_current_stage = Rand.random(count.get(0), count.get(1));
            }
            //select the rule
            String result = Rand.random_from_list_weighted(this.rules.get(this.current_stage), this.weights.get(this.current_stage));
            this.tickets_current_stage -= 1;
            if (this.tickets_current_stage==0){
                this.current_stage++;
                this.tickets_current_stage = -1;
            }
            return result;
        }
    }

    public static List<Variable> packList(Variable... args){
        List<Variable> l = new ArrayList<>();
        for (Variable v: args){
            l.add(v);
        }
        return l;
    }

    public static List<String> rules;
    public static final int DEFAULT_MAX_REP = 8;
    public static SQLConnection connection = null;
    public static Stages stages = null;
    public static Context context;

    public static void init(SQLConnection conn) throws Exception{
        Fuzzer.rules = new ArrayList<>();
        if (conn != null){
            Fuzzer.connection = conn;
        }
        else if ("jdbc:mysql://localhost:3306/?user=sqlancer&password=sqlancer".length()>0){
            Class.forName("com.mysql.cj.jdbc.Driver");

            Fuzzer.connection = new SQLConnection(DriverManager.getConnection("jdbc:mysql://localhost:3306/?user=sqlancer&password=sqlancer")); 
        }
        else {
            throw new Exception("Fuzzer.init :: Fuzzer must be initialized with either compile-time set JDBC string or runtime set SQLConnection, none found");
        }
        Fuzzer.context = new Context(conn);
        Fuzzer.stages = new Stages();
        // EXAMPLE:
        // Fuzzer.rules.add("createTable");
        // Context.add_rule("createTable");
        Fuzzer.rules.add("alterTable");
        Context.add_rule("alterTable");
        Fuzzer.rules.add("alterSpecification");
        Context.add_rule("alterSpecification");
        Fuzzer.rules.add("columnDefinition");
        Context.add_rule("columnDefinition");
        Fuzzer.rules.add("dropDatabase");
        Context.add_rule("dropDatabase");
        Fuzzer.rules.add("dropSchema");
        Context.add_rule("dropSchema");
        Fuzzer.rules.add("createDatabase");
        Context.add_rule("createDatabase");
        Fuzzer.rules.add("useDatabase");
        Context.add_rule("useDatabase");
        Fuzzer.rules.add("createTable");
        Context.add_rule("createTable");
        Fuzzer.rules.add("createIndex");
        Context.add_rule("createIndex");
        Fuzzer.rules.add("truncateTable");
        Context.add_rule("truncateTable");
        Fuzzer.rules.add("insertStatement");
        Context.add_rule("insertStatement");
        Fuzzer.rules.add("updateStatement");
        Context.add_rule("updateStatement");
        Fuzzer.rules.add("expression");
        Context.add_rule("expression");
        Fuzzer.rules.add("selectStatement");
        Context.add_rule("selectStatement");
        Fuzzer.rules.add("where_predicate");
        Context.add_rule("where_predicate");
        Fuzzer.rules.add("predicate");
        Context.add_rule("predicate");
        Fuzzer.rules.add("comparison");
        Context.add_rule("comparison");
        Fuzzer.rules.add("waitNowaitClause");
        Context.add_rule("waitNowaitClause");
        Fuzzer.rules.add("abs");
        Context.add_rule("abs");
        Fuzzer.rules.add("bit_count");
        Context.add_rule("bit_count");
        Fuzzer.rules.add("coalesce");
        Context.add_rule("coalesce");
        Fuzzer.rules.add("if_func");
        Context.add_rule("if_func");
        Fuzzer.rules.add("ifnull");
        Context.add_rule("ifnull");
        Fuzzer.rules.add("greatest");
        Context.add_rule("greatest");
        Fuzzer.rules.add("least");
        Context.add_rule("least");
        Fuzzer.rules.add("strcmp");
        Context.add_rule("strcmp");
        Fuzzer.rules.add("substr");
        Context.add_rule("substr");
        Fuzzer.rules.add("substring");
        Context.add_rule("substring");
        Fuzzer.rules.add("trim");
        Context.add_rule("trim");
        Fuzzer.rules.add("lcase");
        Context.add_rule("lcase");
        Fuzzer.rules.add("ucase");
        Context.add_rule("ucase");
        Fuzzer.rules.add("space");
        Context.add_rule("space");
        Fuzzer.rules.add("last_insert_id");
        Context.add_rule("last_insert_id");
        Fuzzer.rules.add("float_expr");
        Context.add_rule("float_expr");
        Fuzzer.rules.add("float_val");
        Context.add_rule("float_val");
        Fuzzer.rules.add("int_expr");
        Context.add_rule("int_expr");
        Fuzzer.rules.add("int_val");
        Context.add_rule("int_val");
        Fuzzer.rules.add("text_expr");
        Context.add_rule("text_expr");
        Fuzzer.rules.add("text_val");
        Context.add_rule("text_val");
        Fuzzer.rules.add("db");
        Context.add_rule("db");
        Fuzzer.rules.add("table");
        Context.add_rule("table");
        Fuzzer.rules.add("column");
        Context.add_rule("column");
        Fuzzer.rules.add("index");
        Context.add_rule("index");
        Fuzzer.rules.add("ifNotExists");
        Context.add_rule("ifNotExists");
        Fuzzer.rules.add("ifExists");
        Context.add_rule("ifExists");
        Fuzzer.rules.add("ADD");
        Context.add_rule("ADD");
        Fuzzer.rules.add("ALGORITHM");
        Context.add_rule("ALGORITHM");
        Fuzzer.rules.add("ALTER");
        Context.add_rule("ALTER");
        Fuzzer.rules.add("AS");
        Context.add_rule("AS");
        Fuzzer.rules.add("BY");
        Context.add_rule("BY");
        Fuzzer.rules.add("COLUMN");
        Context.add_rule("COLUMN");
        Fuzzer.rules.add("COPY");
        Context.add_rule("COPY");
        Fuzzer.rules.add("CREATE");
        Context.add_rule("CREATE");
        Fuzzer.rules.add("DATABASE");
        Context.add_rule("DATABASE");
        Fuzzer.rules.add("DEFAULT");
        Context.add_rule("DEFAULT");
        Fuzzer.rules.add("DELAYED");
        Context.add_rule("DELAYED");
        Fuzzer.rules.add("DROP");
        Context.add_rule("DROP");
        Fuzzer.rules.add("EXCLUSIVE");
        Context.add_rule("EXCLUSIVE");
        Fuzzer.rules.add("EXISTS");
        Context.add_rule("EXISTS");
        Fuzzer.rules.add("FIRST");
        Context.add_rule("FIRST");
        Fuzzer.rules.add("FLOAT");
        Context.add_rule("FLOAT");
        Fuzzer.rules.add("FROM");
        Context.add_rule("FROM");
        Fuzzer.rules.add("FULLTEXT");
        Context.add_rule("FULLTEXT");
        Fuzzer.rules.add("HASH");
        Context.add_rule("HASH");
        Fuzzer.rules.add("HIGH_PRIORITY");
        Context.add_rule("HIGH_PRIORITY");
        Fuzzer.rules.add("IF");
        Context.add_rule("IF");
        Fuzzer.rules.add("IGNORE");
        Context.add_rule("IGNORE");
        Fuzzer.rules.add("INDEX");
        Context.add_rule("INDEX");
        Fuzzer.rules.add("INPLACE");
        Context.add_rule("INPLACE");
        Fuzzer.rules.add("INSERT");
        Context.add_rule("INSERT");
        Fuzzer.rules.add("INT");
        Context.add_rule("INT");
        Fuzzer.rules.add("INTO");
        Context.add_rule("INTO");
        Fuzzer.rules.add("KEY");
        Context.add_rule("KEY");
        Fuzzer.rules.add("LIKE");
        Context.add_rule("LIKE");
        Fuzzer.rules.add("LINEAR");
        Context.add_rule("LINEAR");
        Fuzzer.rules.add("LOCK");
        Context.add_rule("LOCK");
        Fuzzer.rules.add("LOW_PRIORITY");
        Context.add_rule("LOW_PRIORITY");
        Fuzzer.rules.add("NONE");
        Context.add_rule("NONE");
        Fuzzer.rules.add("NOT");
        Context.add_rule("NOT");
        Fuzzer.rules.add("NOWAIT");
        Context.add_rule("NOWAIT");
        Fuzzer.rules.add("NULL");
        Context.add_rule("NULL");
        Fuzzer.rules.add("OFFLINE");
        Context.add_rule("OFFLINE");
        Fuzzer.rules.add("ON");
        Context.add_rule("ON");
        Fuzzer.rules.add("ONLINE");
        Context.add_rule("ONLINE");
        Fuzzer.rules.add("PARTITION");
        Context.add_rule("PARTITION");
        Fuzzer.rules.add("PRIMARY");
        Context.add_rule("PRIMARY");
        Fuzzer.rules.add("RENAME");
        Context.add_rule("RENAME");
        Fuzzer.rules.add("REPLACE");
        Context.add_rule("REPLACE");
        Fuzzer.rules.add("SCHEMA");
        Context.add_rule("SCHEMA");
        Fuzzer.rules.add("SELECT");
        Context.add_rule("SELECT");
        Fuzzer.rules.add("SET");
        Context.add_rule("SET");
        Fuzzer.rules.add("SHARED");
        Context.add_rule("SHARED");
        Fuzzer.rules.add("SPATIAL");
        Context.add_rule("SPATIAL");
        Fuzzer.rules.add("TABLE");
        Context.add_rule("TABLE");
        Fuzzer.rules.add("TEMPORARY");
        Context.add_rule("TEMPORARY");
        Fuzzer.rules.add("TEXT");
        Context.add_rule("TEXT");
        Fuzzer.rules.add("TO");
        Context.add_rule("TO");
        Fuzzer.rules.add("TRUNCATE");
        Context.add_rule("TRUNCATE");
        Fuzzer.rules.add("UNIQUE");
        Context.add_rule("UNIQUE");
        Fuzzer.rules.add("UPDATE");
        Context.add_rule("UPDATE");
        Fuzzer.rules.add("USE");
        Context.add_rule("USE");
        Fuzzer.rules.add("VALUES");
        Context.add_rule("VALUES");
        Fuzzer.rules.add("VIEW");
        Context.add_rule("VIEW");
        Fuzzer.rules.add("WAIT");
        Context.add_rule("WAIT");
        Fuzzer.rules.add("WHERE");
        Context.add_rule("WHERE");
        Fuzzer.rules.add("STUB");
        Context.add_rule("STUB");
        Fuzzer.rules.add("LB");
        Context.add_rule("LB");
        Fuzzer.rules.add("RB");
        Context.add_rule("RB");
        Fuzzer.rules.add("LT");
        Context.add_rule("LT");
        Fuzzer.rules.add("GT");
        Context.add_rule("GT");
        Fuzzer.rules.add("EQ");
        Context.add_rule("EQ");
        Fuzzer.rules.add("SC");
        Context.add_rule("SC");
        Fuzzer.rules.add("US");
        Context.add_rule("US");
        Fuzzer.rules.add("DS");
        Context.add_rule("DS");
        Fuzzer.rules.add("ASTERISK");
        Context.add_rule("ASTERISK");
        Fuzzer.rules.add("DQ");
        Context.add_rule("DQ");
        Fuzzer.rules.add("COMMA");
        Context.add_rule("COMMA");
        Fuzzer.rules.add("DIGIT");
        Context.add_rule("DIGIT");
        Fuzzer.rules.add("SPACE");
        Context.add_rule("SPACE");
        Fuzzer.rules.add("NL");
        Context.add_rule("NL");
        Fuzzer.rules.add("A");
        Context.add_rule("A");
        Fuzzer.rules.add("B");
        Context.add_rule("B");
        Fuzzer.rules.add("C");
        Context.add_rule("C");
        Fuzzer.rules.add("D");
        Context.add_rule("D");
        Fuzzer.rules.add("E");
        Context.add_rule("E");
        Fuzzer.rules.add("F");
        Context.add_rule("F");
        Fuzzer.rules.add("G");
        Context.add_rule("G");
        Fuzzer.rules.add("H");
        Context.add_rule("H");
        Fuzzer.rules.add("I");
        Context.add_rule("I");
        Fuzzer.rules.add("J");
        Context.add_rule("J");
        Fuzzer.rules.add("K");
        Context.add_rule("K");
        Fuzzer.rules.add("L");
        Context.add_rule("L");
        Fuzzer.rules.add("M");
        Context.add_rule("M");
        Fuzzer.rules.add("N");
        Context.add_rule("N");
        Fuzzer.rules.add("O");
        Context.add_rule("O");
        Fuzzer.rules.add("P");
        Context.add_rule("P");
        Fuzzer.rules.add("Q");
        Context.add_rule("Q");
        Fuzzer.rules.add("R");
        Context.add_rule("R");
        Fuzzer.rules.add("S");
        Context.add_rule("S");
        Fuzzer.rules.add("T");
        Context.add_rule("T");
        Fuzzer.rules.add("U");
        Context.add_rule("U");
        Fuzzer.rules.add("V");
        Context.add_rule("V");
        Fuzzer.rules.add("W");
        Context.add_rule("W");
        Fuzzer.rules.add("X");
        Context.add_rule("X");
        Fuzzer.rules.add("Y");
        Context.add_rule("Y");
        Fuzzer.rules.add("Z");
        Context.add_rule("Z");
        Fuzzer.rules.add("CH");
        Context.add_rule("CH");

    }

    public static String fuzz_next() throws Exception{
        String rule = Fuzzer.stages.get_next_rule();
        if (rule==null){
            return null;
        }
        return fuzz(rule);
    }
    // at compile time, each standalone rule (without the fragment modifier)
    // will register itself here
    public static Buffer dispatch(Context ctx, String rule) throws Exception {
        // EXAMPLE:
        // if (rule.equals("createTable")){
        //     return createTable(ctx);
        // }
        if (rule.equals("alterTable")){
            return alterTable(ctx);
        }
        if (rule.equals("alterSpecification")){
            return alterSpecification(ctx);
        }
        if (rule.equals("columnDefinition")){
            return columnDefinition(ctx);
        }
        if (rule.equals("dropDatabase")){
            return dropDatabase(ctx);
        }
        if (rule.equals("dropSchema")){
            return dropSchema(ctx);
        }
        if (rule.equals("createDatabase")){
            return createDatabase(ctx);
        }
        if (rule.equals("useDatabase")){
            return useDatabase(ctx);
        }
        if (rule.equals("createTable")){
            return createTable(ctx);
        }
        if (rule.equals("createIndex")){
            return createIndex(ctx);
        }
        if (rule.equals("truncateTable")){
            return truncateTable(ctx);
        }
        if (rule.equals("insertStatement")){
            return insertStatement(ctx);
        }
        if (rule.equals("updateStatement")){
            return updateStatement(ctx);
        }
        if (rule.equals("expression")){
            return expression(ctx);
        }
        if (rule.equals("selectStatement")){
            return selectStatement(ctx);
        }
        if (rule.equals("where_predicate")){
            return where_predicate(ctx);
        }
        if (rule.equals("predicate")){
            return predicate(ctx);
        }
        if (rule.equals("comparison")){
            return comparison(ctx);
        }
        if (rule.equals("waitNowaitClause")){
            return waitNowaitClause(ctx);
        }
        if (rule.equals("abs")){
            return abs(ctx);
        }
        if (rule.equals("bit_count")){
            return bit_count(ctx);
        }
        if (rule.equals("coalesce")){
            return coalesce(ctx);
        }
        if (rule.equals("if_func")){
            return if_func(ctx);
        }
        if (rule.equals("ifnull")){
            return ifnull(ctx);
        }
        if (rule.equals("greatest")){
            return greatest(ctx);
        }
        if (rule.equals("least")){
            return least(ctx);
        }
        if (rule.equals("strcmp")){
            return strcmp(ctx);
        }
        if (rule.equals("substr")){
            return substr(ctx);
        }
        if (rule.equals("substring")){
            return substring(ctx);
        }
        if (rule.equals("trim")){
            return trim(ctx);
        }
        if (rule.equals("lcase")){
            return lcase(ctx);
        }
        if (rule.equals("ucase")){
            return ucase(ctx);
        }
        if (rule.equals("space")){
            return space(ctx);
        }
        if (rule.equals("last_insert_id")){
            return last_insert_id(ctx);
        }
        if (rule.equals("float_expr")){
            return float_expr(ctx);
        }
        if (rule.equals("float_val")){
            return float_val(ctx);
        }
        if (rule.equals("int_expr")){
            return int_expr(ctx);
        }
        if (rule.equals("int_val")){
            return int_val(ctx);
        }
        if (rule.equals("text_expr")){
            return text_expr(ctx);
        }
        if (rule.equals("text_val")){
            return text_val(ctx);
        }
        if (rule.equals("db")){
            return db(ctx);
        }
        if (rule.equals("table")){
            return table(ctx);
        }
        if (rule.equals("column")){
            return column(ctx);
        }
        if (rule.equals("index")){
            return index(ctx);
        }
        if (rule.equals("ifNotExists")){
            return ifNotExists(ctx);
        }
        if (rule.equals("ifExists")){
            return ifExists(ctx);
        }
        if (rule.equals("ADD")){
            return ADD(ctx);
        }
        if (rule.equals("ALGORITHM")){
            return ALGORITHM(ctx);
        }
        if (rule.equals("ALTER")){
            return ALTER(ctx);
        }
        if (rule.equals("AS")){
            return AS(ctx);
        }
        if (rule.equals("BY")){
            return BY(ctx);
        }
        if (rule.equals("COLUMN")){
            return COLUMN(ctx);
        }
        if (rule.equals("COPY")){
            return COPY(ctx);
        }
        if (rule.equals("CREATE")){
            return CREATE(ctx);
        }
        if (rule.equals("DATABASE")){
            return DATABASE(ctx);
        }
        if (rule.equals("DEFAULT")){
            return DEFAULT(ctx);
        }
        if (rule.equals("DELAYED")){
            return DELAYED(ctx);
        }
        if (rule.equals("DROP")){
            return DROP(ctx);
        }
        if (rule.equals("EXCLUSIVE")){
            return EXCLUSIVE(ctx);
        }
        if (rule.equals("EXISTS")){
            return EXISTS(ctx);
        }
        if (rule.equals("FIRST")){
            return FIRST(ctx);
        }
        if (rule.equals("FLOAT")){
            return FLOAT(ctx);
        }
        if (rule.equals("FROM")){
            return FROM(ctx);
        }
        if (rule.equals("FULLTEXT")){
            return FULLTEXT(ctx);
        }
        if (rule.equals("HASH")){
            return HASH(ctx);
        }
        if (rule.equals("HIGH_PRIORITY")){
            return HIGH_PRIORITY(ctx);
        }
        if (rule.equals("IF")){
            return IF(ctx);
        }
        if (rule.equals("IGNORE")){
            return IGNORE(ctx);
        }
        if (rule.equals("INDEX")){
            return INDEX(ctx);
        }
        if (rule.equals("INPLACE")){
            return INPLACE(ctx);
        }
        if (rule.equals("INSERT")){
            return INSERT(ctx);
        }
        if (rule.equals("INT")){
            return INT(ctx);
        }
        if (rule.equals("INTO")){
            return INTO(ctx);
        }
        if (rule.equals("KEY")){
            return KEY(ctx);
        }
        if (rule.equals("LIKE")){
            return LIKE(ctx);
        }
        if (rule.equals("LINEAR")){
            return LINEAR(ctx);
        }
        if (rule.equals("LOCK")){
            return LOCK(ctx);
        }
        if (rule.equals("LOW_PRIORITY")){
            return LOW_PRIORITY(ctx);
        }
        if (rule.equals("NONE")){
            return NONE(ctx);
        }
        if (rule.equals("NOT")){
            return NOT(ctx);
        }
        if (rule.equals("NOWAIT")){
            return NOWAIT(ctx);
        }
        if (rule.equals("NULL")){
            return NULL(ctx);
        }
        if (rule.equals("OFFLINE")){
            return OFFLINE(ctx);
        }
        if (rule.equals("ON")){
            return ON(ctx);
        }
        if (rule.equals("ONLINE")){
            return ONLINE(ctx);
        }
        if (rule.equals("PARTITION")){
            return PARTITION(ctx);
        }
        if (rule.equals("PRIMARY")){
            return PRIMARY(ctx);
        }
        if (rule.equals("RENAME")){
            return RENAME(ctx);
        }
        if (rule.equals("REPLACE")){
            return REPLACE(ctx);
        }
        if (rule.equals("SCHEMA")){
            return SCHEMA(ctx);
        }
        if (rule.equals("SELECT")){
            return SELECT(ctx);
        }
        if (rule.equals("SET")){
            return SET(ctx);
        }
        if (rule.equals("SHARED")){
            return SHARED(ctx);
        }
        if (rule.equals("SPATIAL")){
            return SPATIAL(ctx);
        }
        if (rule.equals("TABLE")){
            return TABLE(ctx);
        }
        if (rule.equals("TEMPORARY")){
            return TEMPORARY(ctx);
        }
        if (rule.equals("TEXT")){
            return TEXT(ctx);
        }
        if (rule.equals("TO")){
            return TO(ctx);
        }
        if (rule.equals("TRUNCATE")){
            return TRUNCATE(ctx);
        }
        if (rule.equals("UNIQUE")){
            return UNIQUE(ctx);
        }
        if (rule.equals("UPDATE")){
            return UPDATE(ctx);
        }
        if (rule.equals("USE")){
            return USE(ctx);
        }
        if (rule.equals("VALUES")){
            return VALUES(ctx);
        }
        if (rule.equals("VIEW")){
            return VIEW(ctx);
        }
        if (rule.equals("WAIT")){
            return WAIT(ctx);
        }
        if (rule.equals("WHERE")){
            return WHERE(ctx);
        }
        if (rule.equals("STUB")){
            return STUB(ctx);
        }
        if (rule.equals("LB")){
            return LB(ctx);
        }
        if (rule.equals("RB")){
            return RB(ctx);
        }
        if (rule.equals("LT")){
            return LT(ctx);
        }
        if (rule.equals("GT")){
            return GT(ctx);
        }
        if (rule.equals("EQ")){
            return EQ(ctx);
        }
        if (rule.equals("SC")){
            return SC(ctx);
        }
        if (rule.equals("US")){
            return US(ctx);
        }
        if (rule.equals("DS")){
            return DS(ctx);
        }
        if (rule.equals("ASTERISK")){
            return ASTERISK(ctx);
        }
        if (rule.equals("DQ")){
            return DQ(ctx);
        }
        if (rule.equals("COMMA")){
            return COMMA(ctx);
        }
        if (rule.equals("DIGIT")){
            return DIGIT(ctx);
        }
        if (rule.equals("SPACE")){
            return SPACE(ctx);
        }
        if (rule.equals("NL")){
            return NL(ctx);
        }
        if (rule.equals("A")){
            return A(ctx);
        }
        if (rule.equals("B")){
            return B(ctx);
        }
        if (rule.equals("C")){
            return C(ctx);
        }
        if (rule.equals("D")){
            return D(ctx);
        }
        if (rule.equals("E")){
            return E(ctx);
        }
        if (rule.equals("F")){
            return F(ctx);
        }
        if (rule.equals("G")){
            return G(ctx);
        }
        if (rule.equals("H")){
            return H(ctx);
        }
        if (rule.equals("I")){
            return I(ctx);
        }
        if (rule.equals("J")){
            return J(ctx);
        }
        if (rule.equals("K")){
            return K(ctx);
        }
        if (rule.equals("L")){
            return L(ctx);
        }
        if (rule.equals("M")){
            return M(ctx);
        }
        if (rule.equals("N")){
            return N(ctx);
        }
        if (rule.equals("O")){
            return O(ctx);
        }
        if (rule.equals("P")){
            return P(ctx);
        }
        if (rule.equals("Q")){
            return Q(ctx);
        }
        if (rule.equals("R")){
            return R(ctx);
        }
        if (rule.equals("S")){
            return S(ctx);
        }
        if (rule.equals("T")){
            return T(ctx);
        }
        if (rule.equals("U")){
            return U(ctx);
        }
        if (rule.equals("V")){
            return V(ctx);
        }
        if (rule.equals("W")){
            return W(ctx);
        }
        if (rule.equals("X")){
            return X(ctx);
        }
        if (rule.equals("Y")){
            return Y(ctx);
        }
        if (rule.equals("Z")){
            return Z(ctx);
        }
        if (rule.equals("CH")){
            return CH(ctx);
        }
        
        throw new Exception("Fuzzer::dispatch : there is no rule registered with name "+rule);
    }
    public static String fuzz_next_and_execute() throws Exception{
        String stmt = fuzz_next();
        if (stmt==null){
            return null;
        }
        Fuzzer.connection.createStatement().execute(stmt);
        return stmt;
    }

    // this is the entry point
    public static String fuzz(String rule) throws Exception{
        Buffer buf = dispatch(Fuzzer.context, rule);
        return buf.toString();
    }

    // The following lines are generated from line 29
    public static Buffer node16(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(6),Variable.factory(",")));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 29
            buf.add(ctx.getSymbol(buf, "alterSpecification", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 28
    public static Buffer node2(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 28
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("exist"))));

        // The following lines are generated from line 28
        buf.add(ctx.getSymbol(buf, "ALTER", new ArrayList<>()));

        // The following lines are generated from line 28
        buf.add(ctx.getSymbol(buf, "TABLE", new ArrayList<>()));

        // The following lines are generated from line 28
        buf.add(ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 29
        buf.add(node16(ctx));

        // The following lines are generated from line 29
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer alterTable(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 28
        buf.add(node2(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 34
    public static Buffer node33(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 34
            buf.add(ctx.getSymbol(buf, "COLUMN", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 34
    public static Buffer node41(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 34
            buf.add(ctx.getSymbol(buf, "FIRST", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 34
    public static Buffer node30(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 34
        buf.add(ctx.getSymbol(buf, "ADD", new ArrayList<>()));

        // The following lines are generated from line 34
        buf.add(node33(ctx));

        // The following lines are generated from line 34
        buf.add(ctx.getSymbol(buf, "new", packList(Variable.factory("column"))));

        // The following lines are generated from line 34
        buf.add(ctx.getSymbol(buf, "columnDefinition", new ArrayList<>()));

        // The following lines are generated from line 34
        buf.add(node41(ctx));

        return buf;
    }
    // The following lines are generated from line 35
    public static Buffer node47(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 35
            buf.add(ctx.getSymbol(buf, "COLUMN", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 35
    public static Buffer node53(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 35
        buf.add(ctx.getSymbol(buf, "new", packList(Variable.factory("column"))));

        // The following lines are generated from line 35
        buf.add(ctx.getSymbol(buf, "columnDefinition", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 35
    public static Buffer node51(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(3),Variable.factory(",")));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 35
            buf.add(node53(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 35
    public static Buffer node44(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 35
        buf.add(ctx.getSymbol(buf, "ADD", new ArrayList<>()));

        // The following lines are generated from line 35
        buf.add(node47(ctx));

        // The following lines are generated from line 35
        buf.add(Variable.factory("("));

        // The following lines are generated from line 35
        buf.add(node51(ctx));

        // The following lines are generated from line 35
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 36
    public static Buffer node68(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 36
            buf.add(ctx.getSymbol(buf, "COLUMN", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 36
    public static Buffer node65(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 36
        buf.add(ctx.getSymbol(buf, "DROP", new ArrayList<>()));

        // The following lines are generated from line 36
        buf.add(node68(ctx));

        // The following lines are generated from line 36
        buf.add(ctx.getSymbol(buf, "column", packList(ctx.getSymbol(buf, "t", new ArrayList<>()))).getAttr("unique_any", new ArrayList<>()));

        // The following lines are generated from line 36
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("delete all"),Variable.factory("has a partitioning function dependency"))));

        return buf;
    }
    // The following lines are generated from line 37
    public static Buffer node80(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 37
        buf.add(ctx.getSymbol(buf, "DROP", new ArrayList<>()));

        // The following lines are generated from line 37
        buf.add(ctx.getSymbol(buf, "PRIMARY", new ArrayList<>()));

        // The following lines are generated from line 37
        buf.add(ctx.getSymbol(buf, "KEY", new ArrayList<>()));

        // The following lines are generated from line 37
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("primary"))));

        return buf;
    }
    // The following lines are generated from line 38
    public static Buffer node93(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 38
            buf.add(ctx.getSymbol(buf, "TO", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 38
            buf.add(ctx.getSymbol(buf, "AS", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 38
    public static Buffer node90(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 38
        buf.add(ctx.getSymbol(buf, "RENAME", new ArrayList<>()));

        // The following lines are generated from line 38
        buf.add(node93(ctx));

        // The following lines are generated from line 38
        buf.add(ctx.getSymbol(buf, "new", packList(Variable.factory("table"))));

        return buf;
    }
    // The following lines are generated from line 39
    public static Buffer node103(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "RENAME", new ArrayList<>()));

        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "COLUMN", new ArrayList<>()));

        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "column", packList(ctx.getSymbol(buf, "t", new ArrayList<>()))).getAttr("unique_any", new ArrayList<>()));

        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "TO", new ArrayList<>()));

        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "column", new ArrayList<>()).getAttr("unique_any", new ArrayList<>()));

        // The following lines are generated from line 39
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("has a partitioning function dependency and cannot be dropped or renamed"))));

        return buf;
    }
    // The following lines are generated from line 34
    public static Buffer node29(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 16.666666666666668);
        opt.addOption(1, 16.666666666666668);
        opt.addOption(2, 16.666666666666668);
        opt.addOption(3, 16.666666666666668);
        opt.addOption(4, 16.666666666666668);
        opt.addOption(5, 16.666666666666668);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 34
            buf.add(node30(ctx));
        }
        if(index==1){
            // The following lines are generated from line 35
            buf.add(node44(ctx));
        }
        if(index==2){
            // The following lines are generated from line 36
            buf.add(node65(ctx));
        }
        if(index==3){
            // The following lines are generated from line 37
            buf.add(node80(ctx));
        }
        if(index==4){
            // The following lines are generated from line 38
            buf.add(node90(ctx));
        }
        if(index==5){
            // The following lines are generated from line 39
            buf.add(node103(ctx));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer alterSpecification(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 34
        buf.add(node29(ctx));

        return buf;
    }
    // The following lines are generated from line 43
    public static Buffer node122(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 33.333333333333336);
        opt.addOption(1, 33.333333333333336);
        opt.addOption(2, 33.333333333333336);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 43
            buf.add(Variable.factory(" FLOAT "));
        }
        if(index==1){
            // The following lines are generated from line 43
            buf.add(Variable.factory(" INT "));
        }
        if(index==2){
            // The following lines are generated from line 43
            buf.add(Variable.factory(" TEXT "));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer columnDefinition(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 43
        buf.add(node122(ctx));

        return buf;
    }
    // The following lines are generated from line 47
    public static Buffer node131(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 47
        buf.add(ctx.getSymbol(buf, "DROP", new ArrayList<>()));

        // The following lines are generated from line 47
        buf.add(ctx.getSymbol(buf, "DATABASE", new ArrayList<>()));

        // The following lines are generated from line 47
        buf.add(ctx.getSymbol(buf, "ifExists", new ArrayList<>()));

        // The following lines are generated from line 47
        buf.add(ctx.eval(ctx.getSymbol(buf, "DB", new ArrayList<>()), "=", ctx.getSymbol(buf, "new", packList(Variable.factory("database")))));

        // The following lines are generated from line 47
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer dropDatabase(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 47
        buf.add(node131(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 51
    public static Buffer node148(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 51
        buf.add(ctx.getSymbol(buf, "DROP", new ArrayList<>()));

        // The following lines are generated from line 51
        buf.add(ctx.getSymbol(buf, "SCHEMA", new ArrayList<>()));

        // The following lines are generated from line 51
        buf.add(ctx.getSymbol(buf, "ifExists", new ArrayList<>()));

        // The following lines are generated from line 51
        buf.add(ctx.getSymbol(buf, "DB", new ArrayList<>()));

        // The following lines are generated from line 51
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer dropSchema(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 51
        buf.add(node148(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 56
    public static Buffer node164(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 56
            buf.add(ctx.getSymbol(buf, "DATABASE", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 56
            buf.add(ctx.getSymbol(buf, "SCHEMA", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 56
    public static Buffer node171(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 56
            buf.add(ctx.getSymbol(buf, "ifNotExists", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 56
    public static Buffer node161(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 56
        buf.add(ctx.getSymbol(buf, "CREATE", new ArrayList<>()));

        // The following lines are generated from line 56
        buf.add(node164(ctx));

        // The following lines are generated from line 56
        buf.add(node171(ctx));

        // The following lines are generated from line 56
        buf.add(ctx.eval(ctx.getSymbol(buf, "DB", new ArrayList<>()), "=", ctx.getSymbol(buf, "new", packList(Variable.factory("database")))));

        // The following lines are generated from line 56
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer createDatabase(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 56
        buf.add(node161(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 60
    public static Buffer node184(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 60
        buf.add(ctx.getSymbol(buf, "USE", new ArrayList<>()));

        // The following lines are generated from line 60
        buf.add(ctx.getSymbol(buf, "DB", new ArrayList<>()));

        // The following lines are generated from line 60
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer useDatabase(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 60
        buf.add(node184(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 65
    public static Buffer node203(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 65
        buf.add(ctx.getSymbol(buf, "TEMPORARY", new ArrayList<>()));

        // The following lines are generated from line 65
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("Cannot create temporary table with partitions"))));

        return buf;
    }
    // The following lines are generated from line 65
    public static Buffer node200(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 90.0);
        opt.addOption(1, 10.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 65
            buf.add(Variable.factory(" "));
        }
        if(index==1){
            // The following lines are generated from line 65
            buf.add(node203(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 66
    public static Buffer node211(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 66
            buf.add(ctx.getSymbol(buf, "ifNotExists", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 68
    public static Buffer node223(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 68
        buf.add(ctx.eval(ctx.getSymbol(buf, "cn", new ArrayList<>()), "+=", ctx.getSymbol(buf, "new", packList(Variable.factory("column")))));

        // The following lines are generated from line 68
        buf.add(ctx.getSymbol(buf, "columnDefinition", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 68
    public static Buffer node221(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(5),Variable.factory(","),Variable.factory(30)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 68
            buf.add(node223(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 70
    public static Buffer node247(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 70
            buf.add(Variable.factory(" MyISAM "));
        }
        if(index==1){
            // The following lines are generated from line 70
            buf.add(Variable.factory(" InnoDB "));
        }
        return buf;
    }
    // The following lines are generated from line 70
    public static Buffer node243(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 70
        buf.add(Variable.factory(" ENGINE "));

        // The following lines are generated from line 70
        buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));

        // The following lines are generated from line 70
        buf.add(node247(ctx));

        return buf;
    }
    // The following lines are generated from line 71
    public static Buffer node257(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 71
            buf.add(ctx.getSymbol(buf, "LINEAR", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 73
    public static Buffer node266(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 73
        buf.add(Variable.factory("HASH("));

        // The following lines are generated from line 73
        buf.add(ctx.getSymbol(buf, "cn", new ArrayList<>()).getAttr("any", new ArrayList<>()));

        // The following lines are generated from line 73
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 74
    public static Buffer node278(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 74
            buf.add(Variable.factory("1"));
        }
        if(index==1){
            // The following lines are generated from line 74
            buf.add(Variable.factory("2"));
        }
        return buf;
    }
    // The following lines are generated from line 74
    public static Buffer node276(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 74
        buf.add(Variable.factory("ALGORITHM="));

        // The following lines are generated from line 74
        buf.add(node278(ctx));

        return buf;
    }
    // The following lines are generated from line 74
    public static Buffer node274(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 74
            buf.add(node276(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 74
    public static Buffer node272(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 74
        buf.add(Variable.factory(" KEY "));

        // The following lines are generated from line 74
        buf.add(node274(ctx));

        // The following lines are generated from line 74
        buf.add(Variable.factory("("));

        // The following lines are generated from line 74
        buf.add(ctx.getSymbol(buf, "cn", new ArrayList<>()).getAttr("any", new ArrayList<>()));

        // The following lines are generated from line 74
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 73
    public static Buffer node265(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 73
            buf.add(node266(ctx));
        }
        if(index==1){
            // The following lines are generated from line 74
            buf.add(node272(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 71
    public static Buffer node252(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 71
        buf.add(ctx.getSymbol(buf, "PARTITION", new ArrayList<>()));

        // The following lines are generated from line 71
        buf.add(ctx.getSymbol(buf, "BY", new ArrayList<>()));

        // The following lines are generated from line 71
        buf.add(node257(ctx));

        // The following lines are generated from line 71
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("allowed type"))));

        // The following lines are generated from line 73
        buf.add(node265(ctx));

        return buf;
    }
    // The following lines are generated from line 69
    public static Buffer node240(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 80.0);
        opt.addOption(1, 10.0);
        opt.addOption(2, 10.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 69
            buf.add(Variable.factory(" "));
        }
        if(index==1){
            // The following lines are generated from line 70
            buf.add(node243(ctx));
        }
        if(index==2){
            // The following lines are generated from line 71
            buf.add(node252(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 68
    public static Buffer node218(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 68
        buf.add(ctx.getSymbol(buf, "LB", new ArrayList<>()));

        // The following lines are generated from line 68
        buf.add(node221(ctx));

        // The following lines are generated from line 68
        buf.add(ctx.getSymbol(buf, "RB", new ArrayList<>()));

        // The following lines are generated from line 69
        buf.add(node240(ctx));

        return buf;
    }
    // The following lines are generated from line 77
    public static Buffer node288(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 77
        buf.add(ctx.getSymbol(buf, "LIKE", new ArrayList<>()));

        // The following lines are generated from line 77
        buf.add(ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 68
    public static Buffer node217(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 90.0);
        opt.addOption(1, 10.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 68
            buf.add(node218(ctx));
        }
        if(index==1){
            // The following lines are generated from line 77
            buf.add(node288(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 64
    public static Buffer node193(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 64
        buf.add(ctx.getSymbol(buf, "CREATE", new ArrayList<>()));

        // The following lines are generated from line 64
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("A BLOB field is not allowed in partition function"),Variable.factory("is of a not allowed type for this type of partitioning"))));

        // The following lines are generated from line 65
        buf.add(node200(ctx));

        // The following lines are generated from line 65
        buf.add(ctx.getSymbol(buf, "TABLE", new ArrayList<>()));

        // The following lines are generated from line 66
        buf.add(node211(ctx));

        // The following lines are generated from line 66
        buf.add(ctx.getSymbol(buf, "new", packList(Variable.factory("table"))));

        // The following lines are generated from line 68
        buf.add(node217(ctx));

        // The following lines are generated from line 78
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer createTable(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 64
        buf.add(node193(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 84
    public static Buffer node308(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 84
        buf.add(ctx.getSymbol(buf, "UNIQUE", new ArrayList<>()));

        // The following lines are generated from line 84
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("Duplicate"),Variable.factory("A UNIQUE INDEX must include all columns in the "))));

        return buf;
    }
    // The following lines are generated from line 85
    public static Buffer node315(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 85
        buf.add(ctx.getSymbol(buf, "FULLTEXT", new ArrayList<>()));

        // The following lines are generated from line 85
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("cannot be part of"),Variable.factory(" support FULLTEXT indexes"))));

        return buf;
    }
    // The following lines are generated from line 86
    public static Buffer node322(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 86
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("A SPATIAL index may only contain a geometrical type column"))));

        // The following lines are generated from line 86
        buf.add(ctx.getSymbol(buf, "SPATIAL", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 84
    public static Buffer node307(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 49.0);
        opt.addOption(1, 49.0);
        opt.addOption(2, 2.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 84
            buf.add(node308(ctx));
        }
        if(index==1){
            // The following lines are generated from line 85
            buf.add(node315(ctx));
        }
        if(index==2){
            // The following lines are generated from line 86
            buf.add(node322(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 83
    public static Buffer node304(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(0),Variable.factory(1),Variable.factory(90)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 84
            buf.add(node307(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 89
    public static Buffer node354(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(6)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 89
            buf.add(ctx.getSymbol(buf, "c", new ArrayList<>()).getAttr("unique_any", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 91
    public static Buffer node371(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 33.333333333333336);
        opt.addOption(1, 33.333333333333336);
        opt.addOption(2, 33.333333333333336);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 91
            buf.add(ctx.getSymbol(buf, "DEFAULT", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 91
            buf.add(ctx.getSymbol(buf, "INPLACE", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 91
            buf.add(ctx.getSymbol(buf, "COPY", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 91
    public static Buffer node366(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 91
        buf.add(ctx.getSymbol(buf, "ALGORITHM", new ArrayList<>()));

        // The following lines are generated from line 91
        buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));

        // The following lines are generated from line 91
        buf.add(node371(ctx));

        return buf;
    }
    // The following lines are generated from line 92
    public static Buffer node386(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 25.0);
        opt.addOption(1, 25.0);
        opt.addOption(2, 25.0);
        opt.addOption(3, 25.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 92
            buf.add(ctx.getSymbol(buf, "DEFAULT", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 92
            buf.add(ctx.getSymbol(buf, "NONE", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 92
            buf.add(ctx.getSymbol(buf, "SHARED", new ArrayList<>()));
        }
        if(index==3){
            // The following lines are generated from line 92
            buf.add(ctx.getSymbol(buf, "EXCLUSIVE", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 92
    public static Buffer node381(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 92
        buf.add(ctx.getSymbol(buf, "LOCK", new ArrayList<>()));

        // The following lines are generated from line 92
        buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));

        // The following lines are generated from line 92
        buf.add(node386(ctx));

        return buf;
    }
    // The following lines are generated from line 91
    public static Buffer node365(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 91
            buf.add(node366(ctx));
        }
        if(index==1){
            // The following lines are generated from line 92
            buf.add(node381(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 82
    public static Buffer node298(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 82
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("used in key specification without a key length"))));

        // The following lines are generated from line 82
        buf.add(ctx.getSymbol(buf, "CREATE", new ArrayList<>()));

        // The following lines are generated from line 83
        buf.add(node304(ctx));

        // The following lines are generated from line 88
        buf.add(ctx.getSymbol(buf, "INDEX", new ArrayList<>()));

        // The following lines are generated from line 88
        buf.add(ctx.getSymbol(buf, "new", packList(Variable.factory("index"))));

        // The following lines are generated from line 89
        buf.add(ctx.getSymbol(buf, "ON", new ArrayList<>()));

        // The following lines are generated from line 89
        buf.add(ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 89
        ctx.eval(ctx.getSymbol(buf, "c", new ArrayList<>()), "=", ctx.getSymbol(buf, "column", packList(ctx.getSymbol(buf, "t", new ArrayList<>()))));

        // The following lines are generated from line 89
        buf.add(Variable.factory("("));

        // The following lines are generated from line 89
        buf.add(node354(ctx));

        // The following lines are generated from line 89
        buf.add(Variable.factory(")"));

        // The following lines are generated from line 91
        buf.add(node365(ctx));

        // The following lines are generated from line 93
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("is not supported"))));

        // The following lines are generated from line 94
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer createIndex(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 82
        buf.add(node298(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 97
    public static Buffer node406(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 97
        buf.add(ctx.getSymbol(buf, "TRUNCATE", new ArrayList<>()));

        // The following lines are generated from line 97
        buf.add(ctx.getSymbol(buf, "TABLE", new ArrayList<>()));

        // The following lines are generated from line 97
        buf.add(ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>()));

        // The following lines are generated from line 97
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer truncateTable(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 97
        buf.add(node406(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node429(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 33.333333333333336);
        opt.addOption(1, 33.333333333333336);
        opt.addOption(2, 33.333333333333336);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "LOW_PRIORITY", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "DELAYED", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "HIGH_PRIORITY", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node426(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 100
            buf.add(node429(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node439(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "IGNORE", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node423(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 100
        buf.add(ctx.getSymbol(buf, "INSERT", new ArrayList<>()));

        // The following lines are generated from line 100
        buf.add(node426(ctx));

        // The following lines are generated from line 100
        buf.add(node439(ctx));

        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node419(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "REPLACE", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 100
            buf.add(node423(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node442(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 100
            buf.add(ctx.getSymbol(buf, "INTO", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 101
    public static Buffer node455(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(6),Variable.factory(","),Variable.factory(75)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 101
            buf.add(ctx.eval(ctx.getSymbol(buf, "c", new ArrayList<>()), "+=", ctx.getSymbol(buf, "column", packList(ctx.getSymbol(buf, "t", new ArrayList<>())))));
        }
        return buf;
    }
    // The following lines are generated from line 102
    public static Buffer node475(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(ctx.getSymbol(buf, "c", new ArrayList<>()).getAttr("len", new ArrayList<>()),Variable.factory(",")));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 102
            buf.add(ctx.getSymbol(buf, "expression", packList(ctx.getSymbol(buf, "c", new ArrayList<>()).getAttr("next", new ArrayList<>()))));
        }
        return buf;
    }
    // The following lines are generated from line 100
    public static Buffer node418(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 100
        buf.add(node419(ctx));

        // The following lines are generated from line 100
        buf.add(node442(ctx));

        // The following lines are generated from line 100
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("Duplicate"))));

        // The following lines are generated from line 100
        buf.add(ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 101
        buf.add(Variable.factory("("));

        // The following lines are generated from line 101
        buf.add(node455(ctx));

        // The following lines are generated from line 101
        buf.add(Variable.factory(")"));

        // The following lines are generated from line 102
        buf.add(ctx.getSymbol(buf, "VALUES", new ArrayList<>()));

        // The following lines are generated from line 102
        buf.add(Variable.factory("("));

        // The following lines are generated from line 102
        buf.add(node475(ctx));

        // The following lines are generated from line 102
        buf.add(Variable.factory(")"));

        // The following lines are generated from line 103
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer insertStatement(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 100
        buf.add(node418(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 107
    public static Buffer node500(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 107
            buf.add(ctx.getSymbol(buf, "LOW_PRIORITY", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 107
    public static Buffer node503(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 107
            buf.add(ctx.getSymbol(buf, "IGNORE", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 108
    public static Buffer node516(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 108
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "columnName", packList(ctx.getSymbol(buf, "t", new ArrayList<>()))).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 108
        buf.add(Variable.factory("="));

        // The following lines are generated from line 108
        buf.add(ctx.getSymbol(buf, "expression", packList(ctx.getSymbol(buf, "cc", new ArrayList<>()))));

        return buf;
    }
    // The following lines are generated from line 108
    public static Buffer node514(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(6)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 108
            buf.add(node516(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 108
    public static Buffer node539(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 108
            buf.add(ctx.getSymbol(buf, "NOT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 108
    public static Buffer node536(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 108
        buf.add(ctx.getSymbol(buf, "WHERE", new ArrayList<>()));

        // The following lines are generated from line 108
        buf.add(node539(ctx));

        // The following lines are generated from line 108
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "columnName", packList(ctx.getSymbol(buf, "t", new ArrayList<>()))).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 108
        buf.add(Variable.factory("="));

        // The following lines are generated from line 108
        buf.add(ctx.getSymbol(buf, "expression", packList(ctx.getSymbol(buf, "cc", new ArrayList<>()))));

        return buf;
    }
    // The following lines are generated from line 108
    public static Buffer node534(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 108
            buf.add(node536(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 107
    public static Buffer node494(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 107
        buf.add(ctx.getSymbol(buf, "UPDATE", new ArrayList<>()));

        // The following lines are generated from line 107
        buf.add(ctx.getSymbol(buf, "error", packList(Variable.factory("Duplicate"))));

        // The following lines are generated from line 107
        buf.add(node500(ctx));

        // The following lines are generated from line 107
        buf.add(node503(ctx));

        // The following lines are generated from line 107
        buf.add(ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 108
        buf.add(ctx.getSymbol(buf, "SET", new ArrayList<>()));

        // The following lines are generated from line 108
        buf.add(node514(ctx));

        // The following lines are generated from line 108
        buf.add(node534(ctx));

        // The following lines are generated from line 108
        buf.add(ctx.getSymbol(buf, "SC", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer updateStatement(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 107
        buf.add(node494(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 112
    public static Buffer node560(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        if(ctx.eval(ctx.getSymbol(buf, "type", new ArrayList<>()), "==", Variable.factory("INT")).getBoolean()){
            opt.addOption(0, 16.666666666666668);
        }
        if(ctx.eval(ctx.getSymbol(buf, "type", new ArrayList<>()), "==", Variable.factory("TEXT")).getBoolean()){
            opt.addOption(1, 16.666666666666668);
        }
        if(ctx.eval(ctx.getSymbol(buf, "type", new ArrayList<>()), "==", Variable.factory("FLOAT")).getBoolean()){
            opt.addOption(2, 16.666666666666668);
        }
        opt.addOption(3, 16.666666666666668);
        opt.addOption(4, 16.666666666666668);
        opt.addOption(5, 16.666666666666668);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 112
            buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 113
            buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 114
            buf.add(ctx.getSymbol(buf, "float_expr", new ArrayList<>()));
        }
        if(index==3){
            // The following lines are generated from line 115
            buf.add(ctx.getSymbol(buf, "least", new ArrayList<>()));
        }
        if(index==4){
            // The following lines are generated from line 116
            buf.add(ctx.getSymbol(buf, "greatest", new ArrayList<>()));
        }
        if(index==5){
            // The following lines are generated from line 117
            buf.add(ctx.getSymbol(buf, "if_func", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer expression(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        arg_decls.add(ctx.getSymbol(buf, "type", new ArrayList<>()));
        ctx.enter(arg_decls);
        // The following lines are generated from line 112
        buf.add(node560(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 128
    public static Buffer node643(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 128
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 128
        ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()), "=", ctx.getSymbol(buf, "column_name", packList(ctx.getSymbol(buf, "tt", new ArrayList<>()))));

        // The following lines are generated from line 128
        ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "+=", ctx.getSymbol(buf, "tt", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 128
    public static Buffer node663(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 128
        buf.add(Variable.factory("("));

        // The following lines are generated from line 128
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "selectStatement", new ArrayList<>())));

        // The following lines are generated from line 128
        buf.add(Variable.factory(")"));

        // The following lines are generated from line 128
        buf.add(ctx.getSymbol(buf, "AS", new ArrayList<>()));

        // The following lines are generated from line 128
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "new", packList(Variable.factory("table")))));

        // The following lines are generated from line 128
        ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()), "=", ctx.getSymbol(buf, "cc", new ArrayList<>()));

        // The following lines are generated from line 128
        ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "+=", ctx.getSymbol(buf, "tt", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 128
    public static Buffer node642(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 128
            buf.add(node643(ctx));
        }
        if(index==1){
            // The following lines are generated from line 128
            buf.add(node663(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 131
    public static Buffer node696(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 131
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "table", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 131
        ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()), "=", ctx.getSymbol(buf, "column_name", packList(ctx.getSymbol(buf, "tt", new ArrayList<>()))));

        // The following lines are generated from line 131
        ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "+=", ctx.getSymbol(buf, "tt", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 131
    public static Buffer node716(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 131
        buf.add(Variable.factory("("));

        // The following lines are generated from line 131
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "selectStatement", new ArrayList<>())));

        // The following lines are generated from line 131
        buf.add(Variable.factory(")"));

        // The following lines are generated from line 131
        buf.add(ctx.getSymbol(buf, "AS", new ArrayList<>()));

        // The following lines are generated from line 131
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "new", packList(Variable.factory("table")))));

        // The following lines are generated from line 131
        ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()), "=", ctx.getSymbol(buf, "cc", new ArrayList<>()));

        // The following lines are generated from line 131
        ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "+=", ctx.getSymbol(buf, "tt", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 131
    public static Buffer node695(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 131
            buf.add(node696(ctx));
        }
        if(index==1){
            // The following lines are generated from line 131
            buf.add(node716(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 131
    public static Buffer node692(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 131
        buf.add(ctx.getSymbol(buf, "JOIN", new ArrayList<>()));

        // The following lines are generated from line 131
        buf.add(node695(ctx));

        return buf;
    }
    // The following lines are generated from line 130
    public static Buffer node690(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 131
            buf.add(node692(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 127
    public static Buffer node639(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 128
        buf.add(ctx.getSymbol(buf, "FROM", new ArrayList<>()));
        // The following lines are generated from line 128
        buf.add(node642(ctx));
        // The following lines are generated from line 130
        buf.add(node690(ctx));
        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node608(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 122
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>()).getAttr("any", new ArrayList<>())));

        // The following lines are generated from line 122
        buf.add(ctx.getSymbol(buf, "DOT", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node607(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 122
            buf.add(node608(ctx));
        }
        if(index==1){
            // The following lines are generated from line 122
            ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>()).getAttr("any", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node606(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 122
        buf.add(node607(ctx));

        // The following lines are generated from line 122
        buf.add(ctx.eval(ctx.getSymbol(buf, "c", new ArrayList<>()), "+=", ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()).getAttr("unique_any", new ArrayList<>())));

        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node605(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 122
            buf.add(node606(ctx));
        }
        if(index==1){
            // The following lines are generated from line 123
            buf.add(ctx.getSymbol(buf, "columnerrorxpression", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node604(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "rep", new ArrayList<>());
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 122
            buf.add(node605(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 122
    public static Buffer node602(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 90.0);
        opt.addOption(1, 10.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 122
            buf.add(node604(ctx));
        }
        if(index==1){
            // The following lines are generated from line 125
            buf.add(ctx.getSymbol(buf, "ASTERISK", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 120
    public static Buffer node599(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 121
        buf.add(ctx.getSymbol(buf, "SELECT", new ArrayList<>()));
        // The following lines are generated from line 122
        buf.add(node602(ctx));
        return buf;
    }
    // The following lines are generated from line 134
    public static Buffer node744(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 134
            buf.add(ctx.getSymbol(buf, "where_predicate", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 136
    public static Buffer node750(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 136
            buf.add(ctx.getSymbol(buf, "UNION", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 136
            buf.add(ctx.getSymbol(buf, "INTERSECT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 136
    public static Buffer node749(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 136
        buf.add(node750(ctx));

        // The following lines are generated from line 136
        buf.add(ctx.getSymbol(buf, "selectStatement", packList(ctx.getSymbol(buf, "random", packList(ctx.getSymbol(buf, "c", new ArrayList<>()).getAttr("len", new ArrayList<>()),Variable.factory(","))))));

        return buf;
    }
    // The following lines are generated from line 135
    public static Buffer node747(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 136
            buf.add(node749(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 133
    public static Buffer node743(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 134
        buf.add(node744(ctx));
        // The following lines are generated from line 135
        buf.add(node747(ctx));
        return buf;
    }
    // The following lines are generated from line 120
    public static Buffer node598(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 127
        buf.set(1, node639(ctx));

        // The following lines are generated from line 120
        buf.set(0, node599(ctx));

        // The following lines are generated from line 133
        buf.set(2, node743(ctx));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer selectStatement(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        arg_decls.add(ctx.eval(ctx.getSymbol(buf, "rep", new ArrayList<>()), "=", ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(5),Variable.factory(",")))));
        ctx.enter(arg_decls);
        // The following lines are generated from line 120
        buf.add(node598(ctx));

        ctx.ret(ctx.getSymbol(buf, "c", new ArrayList<>()));
        return buf;
    }
    // The following lines are generated from line 141
    public static Buffer node777(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 141
        buf.add(ctx.getSymbol(buf, "WHERE", new ArrayList<>()));

        // The following lines are generated from line 141
        buf.add(ctx.getSymbol(buf, "predicate", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 142
    public static Buffer node782(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 142
        buf.add(ctx.getSymbol(buf, "WHERE", new ArrayList<>()));

        // The following lines are generated from line 142
        buf.add(ctx.getSymbol(buf, "c", new ArrayList<>()));

        // The following lines are generated from line 142
        buf.add(ctx.getSymbol(buf, "IN", new ArrayList<>()));

        // The following lines are generated from line 142
        buf.add(Variable.factory("("));

        // The following lines are generated from line 142
        buf.add(ctx.getSymbol(buf, "selectStatement", packList(Variable.factory(1))));

        // The following lines are generated from line 142
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 143
    public static Buffer node797(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 143
            buf.add(ctx.getSymbol(buf, "NOT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 143
    public static Buffer node794(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 143
        buf.add(ctx.getSymbol(buf, "WHERE", new ArrayList<>()));

        // The following lines are generated from line 143
        buf.add(node797(ctx));

        // The following lines are generated from line 143
        buf.add(ctx.getSymbol(buf, "EXISTS", new ArrayList<>()));

        // The following lines are generated from line 143
        buf.add(Variable.factory("("));

        // The following lines are generated from line 143
        buf.add(ctx.getSymbol(buf, "selectStatement", new ArrayList<>()));

        // The following lines are generated from line 143
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 141
    public static Buffer node776(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 33.333333333333336);
        opt.addOption(1, 33.333333333333336);
        opt.addOption(2, 33.333333333333336);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 141
            buf.add(node777(ctx));
        }
        if(index==1){
            // The following lines are generated from line 142
            buf.add(node782(ctx));
        }
        if(index==2){
            // The following lines are generated from line 143
            buf.add(node794(ctx));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer where_predicate(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 141
        buf.add(node776(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node828(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 146
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>())));

        // The following lines are generated from line 146
        buf.add(ctx.getSymbol(buf, "DOT", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node827(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 146
            buf.add(node828(ctx));
        }
        if(index==1){
            // The following lines are generated from line 146
            ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node826(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 146
        buf.add(node827(ctx));

        // The following lines are generated from line 146
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()).getAttr("filter", packList(ctx.eval(ctx.getSymbol(buf, "type", new ArrayList<>()), "==", ctx.getSymbol(buf, "pivot", new ArrayList<>()).getAttr("type", new ArrayList<>())))).getAttr("any", new ArrayList<>())));

        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node820(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 146
            buf.add(ctx.getSymbol(buf, "expression", packList(ctx.getSymbol(buf, "pivot", new ArrayList<>()))));
        }
        if(index==1){
            // The following lines are generated from line 146
            buf.add(node826(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 148
    public static Buffer node866(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 148
        buf.add(ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>())));

        // The following lines are generated from line 148
        buf.add(ctx.getSymbol(buf, "DOT", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 148
    public static Buffer node865(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 148
            buf.add(node866(ctx));
        }
        if(index==1){
            // The following lines are generated from line 148
            ctx.eval(ctx.getSymbol(buf, "tt", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 148
    public static Buffer node864(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 148
        buf.add(node865(ctx));

        // The following lines are generated from line 148
        buf.add(ctx.eval(ctx.getSymbol(buf, "cc", new ArrayList<>()), "=", ctx.getSymbol(buf, "tt", new ArrayList<>()).getAttr("c", new ArrayList<>()).getAttr("filter", packList(ctx.eval(ctx.getSymbol(buf, "type", new ArrayList<>()), "=", ctx.getSymbol(buf, "pivot", new ArrayList<>()).getAttr("type", new ArrayList<>())))).getAttr("any", new ArrayList<>())));

        return buf;
    }
    // The following lines are generated from line 148
    public static Buffer node858(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 148
            buf.add(ctx.getSymbol(buf, "expression", packList(ctx.getSymbol(buf, "cc", new ArrayList<>()))));
        }
        if(index==1){
            // The following lines are generated from line 148
            buf.add(node864(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node810(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 146
        buf.add(Variable.factory("("));

        // The following lines are generated from line 146
        ctx.eval(ctx.getSymbol(buf, "pivot", new ArrayList<>()), "=", ctx.getSymbol(buf, "t", new ArrayList<>()).getAttr("any", new ArrayList<>()).getAttr("c", new ArrayList<>()).getAttr("any", new ArrayList<>()));

        // The following lines are generated from line 146
        buf.add(node820(ctx));

        // The following lines are generated from line 147
        buf.add(ctx.getSymbol(buf, "comparison", new ArrayList<>()));

        // The following lines are generated from line 148
        buf.add(node858(ctx));

        // The following lines are generated from line 148
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 146
    public static Buffer node809(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 30.0);
        opt.addOption(2, 20.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 146
            buf.add(node810(ctx));
        }
        if(index==1){
            // The following lines are generated from line 149
            buf.add(ctx.getSymbol(buf, "ifnull", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 150
            buf.add(ctx.getSymbol(buf, "if_func", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer predicate(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 146
        buf.add(node809(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 153
    public static Buffer node914(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 153
        buf.add(ctx.getSymbol(buf, "LT", new ArrayList<>()));

        // The following lines are generated from line 153
        buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 153
    public static Buffer node919(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 153
        buf.add(ctx.getSymbol(buf, "GT", new ArrayList<>()));

        // The following lines are generated from line 153
        buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 153
    public static Buffer node904(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 20.0);
        opt.addOption(1, 20.0);
        opt.addOption(2, 20.0);
        opt.addOption(3, 20.0);
        opt.addOption(4, 20.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 153
            buf.add(ctx.getSymbol(buf, "LT", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 153
            buf.add(ctx.getSymbol(buf, "GT", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 153
            buf.add(ctx.getSymbol(buf, "EQ", new ArrayList<>()));
        }
        if(index==3){
            // The following lines are generated from line 153
            buf.add(node914(ctx));
        }
        if(index==4){
            // The following lines are generated from line 153
            buf.add(node919(ctx));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer comparison(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 153
        buf.add(node904(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 156
    public static Buffer node926(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 156
        buf.add(ctx.getSymbol(buf, "WAIT", new ArrayList<>()));

        // The following lines are generated from line 156
        buf.add(ctx.getSymbol(buf, "float_val", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 156
    public static Buffer node925(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 156
            buf.add(node926(ctx));
        }
        if(index==1){
            // The following lines are generated from line 157
            buf.add(ctx.getSymbol(buf, "NOWAIT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer waitNowaitClause(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 156
        buf.add(node925(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 160
    public static Buffer node938(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 160
            buf.add(ctx.getSymbol(buf, "float_expr", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 160
            buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 160
    public static Buffer node936(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 160
        buf.add(Variable.factory(" ABS("));

        // The following lines are generated from line 160
        buf.add(node938(ctx));

        // The following lines are generated from line 160
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer abs(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 160
        buf.add(node936(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 161
    public static Buffer node948(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 161
        buf.add(Variable.factory(" BIT_COUNT("));

        // The following lines are generated from line 161
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 161
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer bit_count(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 161
        buf.add(node948(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 162
    public static Buffer node961(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 162
        buf.add(Variable.factory(","));

        // The following lines are generated from line 162
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 162
    public static Buffer node959(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, Fuzzer.DEFAULT_MAX_REP);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 162
            buf.add(node961(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 162
    public static Buffer node955(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 162
        buf.add(Variable.factory(" COALESCE("));

        // The following lines are generated from line 162
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 162
        buf.add(node959(ctx));

        // The following lines are generated from line 162
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer coalesce(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 162
        buf.add(node955(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 163
    public static Buffer node971(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 163
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 163
        buf.add(ctx.getSymbol(buf, "comparison", new ArrayList<>()));

        // The following lines are generated from line 163
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 163
    public static Buffer node970(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 163
            buf.add(node971(ctx));
        }
        if(index==1){
            // The following lines are generated from line 163
            buf.add(ctx.getSymbol(buf, "ifnull", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 163
    public static Buffer node968(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 163
        buf.add(Variable.factory(" IF("));

        // The following lines are generated from line 163
        buf.add(node970(ctx));

        // The following lines are generated from line 163
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 163
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 163
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 163
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 163
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer if_func(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 163
        buf.add(node968(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 164
    public static Buffer node990(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 164
        buf.add(Variable.factory(" IFNULL("));

        // The following lines are generated from line 164
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 164
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 164
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 164
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer ifnull(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 164
        buf.add(node990(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 165
    public static Buffer node1006(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 165
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 165
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 165
    public static Buffer node1004(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(1, Fuzzer.DEFAULT_MAX_REP);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 165
            buf.add(node1006(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 165
    public static Buffer node1000(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 165
        buf.add(Variable.factory(" GREATEST("));

        // The following lines are generated from line 165
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 165
        buf.add(node1004(ctx));

        // The following lines are generated from line 165
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer greatest(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 165
        buf.add(node1000(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 166
    public static Buffer node1019(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 166
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 166
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 166
    public static Buffer node1017(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(1, Fuzzer.DEFAULT_MAX_REP);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 166
            buf.add(node1019(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 166
    public static Buffer node1013(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 166
        buf.add(Variable.factory(" LEAST("));

        // The following lines are generated from line 166
        buf.add(ctx.getSymbol(buf, "expression", new ArrayList<>()));

        // The following lines are generated from line 166
        buf.add(node1017(ctx));

        // The following lines are generated from line 166
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer least(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 166
        buf.add(node1013(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 167
    public static Buffer node1026(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 167
        buf.add(Variable.factory(" STRCMP("));

        // The following lines are generated from line 167
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 167
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 167
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 167
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer strcmp(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 167
        buf.add(node1026(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 168
    public static Buffer node1036(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 168
        buf.add(Variable.factory(" SUBSTR("));

        // The following lines are generated from line 168
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 168
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 168
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 168
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 168
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 168
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer substr(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 168
        buf.add(node1036(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 169
    public static Buffer node1049(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 169
        buf.add(Variable.factory(" SUBSTRING("));

        // The following lines are generated from line 169
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 169
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 169
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 169
        buf.add(Variable.factory(", "));

        // The following lines are generated from line 169
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 169
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer substring(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 169
        buf.add(node1049(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 170
    public static Buffer node1062(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 170
        buf.add(Variable.factory(" TRIM("));

        // The following lines are generated from line 170
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 170
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer trim(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 170
        buf.add(node1062(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 171
    public static Buffer node1069(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 171
        buf.add(Variable.factory(" LCASE("));

        // The following lines are generated from line 171
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 171
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer lcase(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 171
        buf.add(node1069(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 172
    public static Buffer node1076(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 172
        buf.add(Variable.factory(" UCASE("));

        // The following lines are generated from line 172
        buf.add(ctx.getSymbol(buf, "text_expr", new ArrayList<>()));

        // The following lines are generated from line 172
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer ucase(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 172
        buf.add(node1076(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 173
    public static Buffer node1083(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 173
        buf.add(Variable.factory(" SPACE("));

        // The following lines are generated from line 173
        buf.add(ctx.getSymbol(buf, "int_expr", new ArrayList<>()));

        // The following lines are generated from line 173
        buf.add(Variable.factory(") "));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer space(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 173
        buf.add(node1083(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer last_insert_id(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 174
        buf.add(Variable.factory(" LAST_INSERT_ID() "));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 176
    public static Buffer node1095(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 25.0);
        opt.addOption(2, 25.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 176
            buf.add(ctx.getSymbol(buf, "float_val", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 176
            buf.add(ctx.getSymbol(buf, "abs", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 176
            buf.add(ctx.getSymbol(buf, "NULL", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer float_expr(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 176
        buf.add(node1095(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 177
    public static Buffer node1112(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 177
        buf.add(Variable.factory("."));

        // The following lines are generated from line 177
        buf.add(ctx.getSymbol(buf, "int_val", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 177
    public static Buffer node1110(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        int rep = Rand.random(0, 1);
        String delimiter = "";
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 177
            buf.add(node1112(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 177
    public static Buffer node1107(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 177
        buf.add(ctx.getSymbol(buf, "int_val", new ArrayList<>()));

        // The following lines are generated from line 177
        buf.add(node1110(ctx));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer float_val(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 177
        buf.add(node1107(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 178
    public static Buffer node1121(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(0),Variable.factory(1)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 178
            buf.add(ctx.getSymbol(buf, "DS", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 178
    public static Buffer node1120(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 178
        buf.add(node1121(ctx));

        // The following lines are generated from line 178
        buf.add(ctx.getSymbol(buf, "int_val", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 178
    public static Buffer node1119(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 12.5);
        opt.addOption(2, 12.5);
        opt.addOption(3, 12.5);
        opt.addOption(4, 12.5);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 178
            buf.add(node1120(ctx));
        }
        if(index==1){
            // The following lines are generated from line 178
            buf.add(ctx.getSymbol(buf, "bit_count", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 178
            buf.add(ctx.getSymbol(buf, "strcmp", new ArrayList<>()));
        }
        if(index==3){
            // The following lines are generated from line 178
            buf.add(ctx.getSymbol(buf, "last_insert_id", new ArrayList<>()));
        }
        if(index==4){
            // The following lines are generated from line 178
            buf.add(ctx.getSymbol(buf, "NULL", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer int_expr(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 178
        buf.add(node1119(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 179
    public static Buffer node1147(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(5),Variable.factory(0)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 179
            buf.add(ctx.getSymbol(buf, "DIGIT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer int_val(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 179
        buf.add(node1147(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 180
    public static Buffer node1160(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 70.0);
        opt.addOption(1, 4.285714285714286);
        opt.addOption(2, 4.285714285714286);
        opt.addOption(3, 4.285714285714286);
        opt.addOption(4, 4.285714285714286);
        opt.addOption(5, 4.285714285714286);
        opt.addOption(6, 4.285714285714286);
        opt.addOption(7, 4.285714285714286);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "text_val", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "substr", new ArrayList<>()));
        }
        if(index==2){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "substring", new ArrayList<>()));
        }
        if(index==3){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "lcase", new ArrayList<>()));
        }
        if(index==4){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "ucase", new ArrayList<>()));
        }
        if(index==5){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "space", new ArrayList<>()));
        }
        if(index==6){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "trim", new ArrayList<>()));
        }
        if(index==7){
            // The following lines are generated from line 180
            buf.add(ctx.getSymbol(buf, "NULL", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer text_expr(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 180
        buf.add(node1160(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 181
    public static Buffer node1193(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Options opt = new Options();
        opt.addOption(0, 50.0);
        opt.addOption(1, 50.0);
        int index = opt.randomly();
        if(index==0){
            // The following lines are generated from line 181
            buf.add(ctx.getSymbol(buf, "CH", new ArrayList<>()));
        }
        if(index==1){
            // The following lines are generated from line 181
            buf.add(ctx.getSymbol(buf, "DIGIT", new ArrayList<>()));
        }
        return buf;
    }
    // The following lines are generated from line 181
    public static Buffer node1190(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        Variable v = ctx.getSymbol(buf, "random", packList(Variable.factory(1),Variable.factory(100)));
        int rep = v.getNumerical();
        String delimiter = v.getAttr("delimiter", null).isPlaceHolder() ? "" : v.getAttr("delimiter", null).getValue();
        for (int i=0; i<rep; i++){
            if (i!=0){
                buf.add(Variable.factory(delimiter));
            }
            // The following lines are generated from line 181
            buf.add(node1193(ctx));
        }
        return buf;
    }
    // The following lines are generated from line 181
    public static Buffer node1187(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 181
        buf.add(ctx.getSymbol(buf, "DQ", new ArrayList<>()));

        // The following lines are generated from line 181
        buf.add(node1190(ctx));

        // The following lines are generated from line 181
        buf.add(ctx.getSymbol(buf, "DQ", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer text_val(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 181
        buf.add(node1187(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer db(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 183
        ctx.eval(ctx.getSymbol(buf, "d", new ArrayList<>()), "=", ctx.getSymbol(buf, "query", packList(Variable.factory("SHOW DATABASES;"),Variable.factory("Database"))));

        ctx.ret(ctx.getSymbol(buf, "d", new ArrayList<>()));
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer table(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 184
        ctx.eval(ctx.getSymbol(buf, "t", new ArrayList<>()), "=", ctx.getSymbol(buf, "query", packList(Variable.factory("SHOW TABLES;"),ctx.eval(Variable.factory("Tables_in_"), "$+", ctx.getSymbol(buf, "DB", new ArrayList<>())))));

        ctx.ret(ctx.getSymbol(buf, "t", new ArrayList<>()));
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer column(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        arg_decls.add(ctx.getSymbol(buf, "t", new ArrayList<>()));
        ctx.enter(arg_decls);
        // The following lines are generated from line 185
        ctx.eval(ctx.getSymbol(buf, "c", new ArrayList<>()), "=", ctx.getSymbol(buf, "query", packList(ctx.eval(Variable.factory("SHOW COLUMNS FROM "), "$+", ctx.getSymbol(buf, "t", new ArrayList<>())),Variable.factory("Field"))));

        ctx.ret(ctx.getSymbol(buf, "c", new ArrayList<>()));
        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer index(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        arg_decls.add(ctx.getSymbol(buf, "t", new ArrayList<>()));
        ctx.enter(arg_decls);
        // The following lines are generated from line 186
        ctx.eval(ctx.getSymbol(buf, "i", new ArrayList<>()), "=", ctx.getSymbol(buf, "query", packList(ctx.eval(Variable.factory("SHOW INDEX FROM "), "$+", ctx.getSymbol(buf, "t", new ArrayList<>())),Variable.factory("Key_name"))));

        ctx.ret(ctx.getSymbol(buf, "i", new ArrayList<>()));
        return buf;
    }
    // The following lines are generated from line 190
    public static Buffer node1269(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 190
        buf.add(ctx.getSymbol(buf, "IF", new ArrayList<>()));

        // The following lines are generated from line 190
        buf.add(ctx.getSymbol(buf, "NOT", new ArrayList<>()));

        // The following lines are generated from line 190
        buf.add(ctx.getSymbol(buf, "EXISTS", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer ifNotExists(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 190
        buf.add(node1269(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 191
    public static Buffer node1278(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 191
        buf.add(ctx.getSymbol(buf, "IF", new ArrayList<>()));

        // The following lines are generated from line 191
        buf.add(ctx.getSymbol(buf, "EXISTS", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line -1
    public static Buffer ifExists(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        ctx.push_frame();
        List<Variable> arg_decls = new ArrayList<>();
        ctx.enter(arg_decls);
        // The following lines are generated from line 191
        buf.add(node1278(ctx));

        ctx.ret(null);
        return buf;
    }
    // The following lines are generated from line 193
    public static Buffer node1285(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 193
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 193
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 193
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 193
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 193
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 193
    public static Buffer ADD(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 193
        buf.add(node1285(ctx));

        return buf;
    }
    // The following lines are generated from line 194
    public static Buffer node1298(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "G", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 194
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 194
    public static Buffer ALGORITHM(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 194
        buf.add(node1298(ctx));

        return buf;
    }
    // The following lines are generated from line 195
    public static Buffer node1323(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 195
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 195
    public static Buffer ALTER(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 195
        buf.add(node1323(ctx));

        return buf;
    }
    // The following lines are generated from line 196
    public static Buffer node1340(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 196
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 196
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 196
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 196
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 196
    public static Buffer AS(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 196
        buf.add(node1340(ctx));

        return buf;
    }
    // The following lines are generated from line 197
    public static Buffer node1351(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 197
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 197
        buf.add(ctx.getSymbol(buf, "B", new ArrayList<>()));

        // The following lines are generated from line 197
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 197
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 197
    public static Buffer BY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 197
        buf.add(node1351(ctx));

        return buf;
    }
    // The following lines are generated from line 198
    public static Buffer node1362(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 198
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 198
    public static Buffer COLUMN(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 198
        buf.add(node1362(ctx));

        return buf;
    }
    // The following lines are generated from line 199
    public static Buffer node1381(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 199
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 199
    public static Buffer COPY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 199
        buf.add(node1381(ctx));

        return buf;
    }
    // The following lines are generated from line 200
    public static Buffer node1396(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 200
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 200
    public static Buffer CREATE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 200
        buf.add(node1396(ctx));

        return buf;
    }
    // The following lines are generated from line 201
    public static Buffer node1415(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "B", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 201
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 201
    public static Buffer DATABASE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 201
        buf.add(node1415(ctx));

        return buf;
    }
    // The following lines are generated from line 202
    public static Buffer node1438(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 202
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 202
    public static Buffer DEFAULT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 202
        buf.add(node1438(ctx));

        return buf;
    }
    // The following lines are generated from line 203
    public static Buffer node1459(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 203
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 203
    public static Buffer DELAYED(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 203
        buf.add(node1459(ctx));

        return buf;
    }
    // The following lines are generated from line 204
    public static Buffer node1480(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 204
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 204
    public static Buffer DROP(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 204
        buf.add(node1480(ctx));

        return buf;
    }
    // The following lines are generated from line 205
    public static Buffer node1495(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "X", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "V", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 205
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 205
    public static Buffer EXCLUSIVE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 205
        buf.add(node1495(ctx));

        return buf;
    }
    // The following lines are generated from line 206
    public static Buffer node1520(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "X", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 206
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 206
    public static Buffer EXISTS(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 206
        buf.add(node1520(ctx));

        return buf;
    }
    // The following lines are generated from line 207
    public static Buffer node1539(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 207
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 207
    public static Buffer FIRST(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 207
        buf.add(node1539(ctx));

        return buf;
    }
    // The following lines are generated from line 208
    public static Buffer node1556(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 208
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 208
    public static Buffer FLOAT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 208
        buf.add(node1556(ctx));

        return buf;
    }
    // The following lines are generated from line 209
    public static Buffer node1573(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 209
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 209
    public static Buffer FROM(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 209
        buf.add(node1573(ctx));

        return buf;
    }
    // The following lines are generated from line 210
    public static Buffer node1588(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "X", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 210
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 210
    public static Buffer FULLTEXT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 210
        buf.add(node1588(ctx));

        return buf;
    }
    // The following lines are generated from line 211
    public static Buffer node1611(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 211
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 211
    public static Buffer HASH(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 211
        buf.add(node1611(ctx));

        return buf;
    }
    // The following lines are generated from line 212
    public static Buffer node1626(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "G", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "US", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 212
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 212
    public static Buffer HIGH_PRIORITY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 212
        buf.add(node1626(ctx));

        return buf;
    }
    // The following lines are generated from line 213
    public static Buffer node1659(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 213
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 213
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 213
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 213
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 213
    public static Buffer IF(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 213
        buf.add(node1659(ctx));

        return buf;
    }
    // The following lines are generated from line 214
    public static Buffer node1670(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "G", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 214
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 214
    public static Buffer IGNORE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 214
        buf.add(node1670(ctx));

        return buf;
    }
    // The following lines are generated from line 215
    public static Buffer node1689(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "X", new ArrayList<>()));

        // The following lines are generated from line 215
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 215
    public static Buffer INDEX(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 215
        buf.add(node1689(ctx));

        return buf;
    }
    // The following lines are generated from line 216
    public static Buffer node1706(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 216
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 216
    public static Buffer INPLACE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 216
        buf.add(node1706(ctx));

        return buf;
    }
    // The following lines are generated from line 217
    public static Buffer node1727(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 217
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 217
    public static Buffer INSERT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 217
        buf.add(node1727(ctx));

        return buf;
    }
    // The following lines are generated from line 218
    public static Buffer node1746(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 218
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 218
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 218
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 218
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 218
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 218
    public static Buffer INT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 218
        buf.add(node1746(ctx));

        return buf;
    }
    // The following lines are generated from line 219
    public static Buffer node1759(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 219
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 219
    public static Buffer INTO(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 219
        buf.add(node1759(ctx));

        return buf;
    }
    // The following lines are generated from line 220
    public static Buffer node1774(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 220
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 220
        buf.add(ctx.getSymbol(buf, "K", new ArrayList<>()));

        // The following lines are generated from line 220
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 220
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 220
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 220
    public static Buffer KEY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 220
        buf.add(node1774(ctx));

        return buf;
    }
    // The following lines are generated from line 221
    public static Buffer node1787(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "K", new ArrayList<>()));

        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 221
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 221
    public static Buffer LIKE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 221
        buf.add(node1787(ctx));

        return buf;
    }
    // The following lines are generated from line 222
    public static Buffer node1802(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 222
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 222
    public static Buffer LINEAR(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 222
        buf.add(node1802(ctx));

        return buf;
    }
    // The following lines are generated from line 223
    public static Buffer node1821(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "K", new ArrayList<>()));

        // The following lines are generated from line 223
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 223
    public static Buffer LOCK(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 223
        buf.add(node1821(ctx));

        return buf;
    }
    // The following lines are generated from line 224
    public static Buffer node1836(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "W", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "US", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 224
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 224
    public static Buffer LOW_PRIORITY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 224
        buf.add(node1836(ctx));

        return buf;
    }
    // The following lines are generated from line 225
    public static Buffer node1867(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 225
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 225
    public static Buffer NONE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 225
        buf.add(node1867(ctx));

        return buf;
    }
    // The following lines are generated from line 226
    public static Buffer node1882(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 226
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 226
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 226
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 226
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 226
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 226
    public static Buffer NOT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 226
        buf.add(node1882(ctx));

        return buf;
    }
    // The following lines are generated from line 227
    public static Buffer node1895(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "W", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 227
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 227
    public static Buffer NOWAIT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 227
        buf.add(node1895(ctx));

        return buf;
    }
    // The following lines are generated from line 228
    public static Buffer node1914(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 228
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 228
    public static Buffer NULL(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 228
        buf.add(node1914(ctx));

        return buf;
    }
    // The following lines are generated from line 229
    public static Buffer node1929(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "F", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 229
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 229
    public static Buffer OFFLINE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 229
        buf.add(node1929(ctx));

        return buf;
    }
    // The following lines are generated from line 230
    public static Buffer node1950(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 230
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 230
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 230
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 230
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 230
    public static Buffer ON(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 230
        buf.add(node1950(ctx));

        return buf;
    }
    // The following lines are generated from line 231
    public static Buffer node1961(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 231
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 231
    public static Buffer ONLINE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 231
        buf.add(node1961(ctx));

        return buf;
    }
    // The following lines are generated from line 232
    public static Buffer node1980(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 232
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 232
    public static Buffer PARTITION(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 232
        buf.add(node1980(ctx));

        return buf;
    }
    // The following lines are generated from line 233
    public static Buffer node2005(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 233
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 233
    public static Buffer PRIMARY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 233
        buf.add(node2005(ctx));

        return buf;
    }
    // The following lines are generated from line 234
    public static Buffer node2026(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 234
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 234
    public static Buffer RENAME(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 234
        buf.add(node2026(ctx));

        return buf;
    }
    // The following lines are generated from line 235
    public static Buffer node2045(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 235
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 235
    public static Buffer REPLACE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 235
        buf.add(node2045(ctx));

        return buf;
    }
    // The following lines are generated from line 236
    public static Buffer node2066(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 236
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 236
    public static Buffer SCHEMA(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 236
        buf.add(node2066(ctx));

        return buf;
    }
    // The following lines are generated from line 237
    public static Buffer node2085(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 237
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 237
    public static Buffer SELECT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 237
        buf.add(node2085(ctx));

        return buf;
    }
    // The following lines are generated from line 238
    public static Buffer node2104(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 238
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 238
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 238
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 238
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 238
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 238
    public static Buffer SET(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 238
        buf.add(node2104(ctx));

        return buf;
    }
    // The following lines are generated from line 239
    public static Buffer node2117(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 239
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 239
    public static Buffer SHARED(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 239
        buf.add(node2117(ctx));

        return buf;
    }
    // The following lines are generated from line 240
    public static Buffer node2136(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 240
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 240
    public static Buffer SPATIAL(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 240
        buf.add(node2136(ctx));

        return buf;
    }
    // The following lines are generated from line 241
    public static Buffer node2157(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "B", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 241
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 241
    public static Buffer TABLE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 241
        buf.add(node2157(ctx));

        return buf;
    }
    // The following lines are generated from line 242
    public static Buffer node2174(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "M", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "Y", new ArrayList<>()));

        // The following lines are generated from line 242
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 242
    public static Buffer TEMPORARY(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 242
        buf.add(node2174(ctx));

        return buf;
    }
    // The following lines are generated from line 243
    public static Buffer node2199(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "X", new ArrayList<>()));

        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 243
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 243
    public static Buffer TEXT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 243
        buf.add(node2199(ctx));

        return buf;
    }
    // The following lines are generated from line 244
    public static Buffer node2214(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 244
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 244
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 244
        buf.add(ctx.getSymbol(buf, "O", new ArrayList<>()));

        // The following lines are generated from line 244
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 244
    public static Buffer TO(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 244
        buf.add(node2214(ctx));

        return buf;
    }
    // The following lines are generated from line 245
    public static Buffer node2225(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "C", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 245
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 245
    public static Buffer TRUNCATE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 245
        buf.add(node2225(ctx));

        return buf;
    }
    // The following lines are generated from line 246
    public static Buffer node2248(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "N", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "Q", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 246
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 246
    public static Buffer UNIQUE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 246
        buf.add(node2248(ctx));

        return buf;
    }
    // The following lines are generated from line 247
    public static Buffer node2267(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "P", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "D", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 247
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 247
    public static Buffer UPDATE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 247
        buf.add(node2267(ctx));

        return buf;
    }
    // The following lines are generated from line 248
    public static Buffer node2286(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 248
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 248
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 248
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 248
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 248
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 248
    public static Buffer USE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 248
        buf.add(node2286(ctx));

        return buf;
    }
    // The following lines are generated from line 249
    public static Buffer node2299(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "V", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "L", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 249
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 249
    public static Buffer VALUES(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 249
        buf.add(node2299(ctx));

        return buf;
    }
    // The following lines are generated from line 250
    public static Buffer node2318(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "V", new ArrayList<>()));

        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "W", new ArrayList<>()));

        // The following lines are generated from line 250
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 250
    public static Buffer VIEW(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 250
        buf.add(node2318(ctx));

        return buf;
    }
    // The following lines are generated from line 251
    public static Buffer node2333(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "W", new ArrayList<>()));

        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "A", new ArrayList<>()));

        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "I", new ArrayList<>()));

        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 251
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 251
    public static Buffer WAIT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 251
        buf.add(node2333(ctx));

        return buf;
    }
    // The following lines are generated from line 252
    public static Buffer node2348(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "W", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "H", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "R", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "E", new ArrayList<>()));

        // The following lines are generated from line 252
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 252
    public static Buffer WHERE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 252
        buf.add(node2348(ctx));

        return buf;
    }
    // The following lines are generated from line 255
    public static Buffer node2365(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "S", new ArrayList<>()));

        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "T", new ArrayList<>()));

        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "U", new ArrayList<>()));

        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "B", new ArrayList<>()));

        // The following lines are generated from line 255
        buf.add(ctx.getSymbol(buf, "SPACE", new ArrayList<>()));

        return buf;
    }
    // The following lines are generated from line 255
    public static Buffer STUB(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 255
        buf.add(node2365(ctx));

        return buf;
    }
    // The following lines are generated from line 259
    public static Buffer LB(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 259
        buf.add(Variable.factory("("));

        return buf;
    }
    // The following lines are generated from line 260
    public static Buffer RB(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 260
        buf.add(Variable.factory(")"));

        return buf;
    }
    // The following lines are generated from line 261
    public static Buffer LT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 261
        buf.add(Variable.factory("<"));

        return buf;
    }
    // The following lines are generated from line 262
    public static Buffer GT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 262
        buf.add(Variable.factory(">"));

        return buf;
    }
    // The following lines are generated from line 263
    public static Buffer EQ(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 263
        buf.add(Variable.factory("="));

        return buf;
    }
    // The following lines are generated from line 264
    public static Buffer SC(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 264
        buf.add(Variable.factory(";"));

        return buf;
    }
    // The following lines are generated from line 265
    public static Buffer US(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 265
        buf.add(Variable.factory("_"));

        return buf;
    }
    // The following lines are generated from line 266
    public static Buffer DS(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 266
        buf.add(Variable.factory("-"));

        return buf;
    }
    // The following lines are generated from line 267
    public static Buffer ASTERISK(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 267
        buf.add(Variable.factory("*"));

        return buf;
    }
    // The following lines are generated from line 268
    public static Buffer DQ(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 268
        buf.add(Variable.factory("\""));

        return buf;
    }
    // The following lines are generated from line 269
    public static Buffer COMMA(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 269
        buf.add(Variable.factory(","));

        return buf;
    }
    // The following lines are generated from line 271
    public static Buffer node2425(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(48);
        s.add(58);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 271
    public static Buffer DIGIT(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 271
        buf.add(node2425(ctx));

        return buf;
    }
    // The following lines are generated from line 272
    public static Buffer node2429(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(32);
        s.add(33);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 272
    public static Buffer SPACE(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 272
        buf.add(node2429(ctx));

        return buf;
    }
    // The following lines are generated from line 273
    public static Buffer node2433(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(10);
        s.add(11);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 273
    public static Buffer NL(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 273
        buf.add(node2433(ctx));

        return buf;
    }
    // The following lines are generated from line 274
    public static Buffer node2437(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(65);
        s.add(66);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 274
    public static Buffer A(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 274
        buf.add(node2437(ctx));

        return buf;
    }
    // The following lines are generated from line 275
    public static Buffer node2441(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(66);
        s.add(67);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 275
    public static Buffer B(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 275
        buf.add(node2441(ctx));

        return buf;
    }
    // The following lines are generated from line 276
    public static Buffer node2445(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(67);
        s.add(68);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 276
    public static Buffer C(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 276
        buf.add(node2445(ctx));

        return buf;
    }
    // The following lines are generated from line 277
    public static Buffer node2449(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(68);
        s.add(69);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 277
    public static Buffer D(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 277
        buf.add(node2449(ctx));

        return buf;
    }
    // The following lines are generated from line 278
    public static Buffer node2453(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(69);
        s.add(70);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 278
    public static Buffer E(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 278
        buf.add(node2453(ctx));

        return buf;
    }
    // The following lines are generated from line 279
    public static Buffer node2457(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(70);
        s.add(71);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 279
    public static Buffer F(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 279
        buf.add(node2457(ctx));

        return buf;
    }
    // The following lines are generated from line 280
    public static Buffer node2461(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(71);
        s.add(72);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 280
    public static Buffer G(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 280
        buf.add(node2461(ctx));

        return buf;
    }
    // The following lines are generated from line 281
    public static Buffer node2465(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(72);
        s.add(73);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 281
    public static Buffer H(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 281
        buf.add(node2465(ctx));

        return buf;
    }
    // The following lines are generated from line 282
    public static Buffer node2469(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(73);
        s.add(74);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 282
    public static Buffer I(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 282
        buf.add(node2469(ctx));

        return buf;
    }
    // The following lines are generated from line 283
    public static Buffer node2473(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(74);
        s.add(75);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 283
    public static Buffer J(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 283
        buf.add(node2473(ctx));

        return buf;
    }
    // The following lines are generated from line 284
    public static Buffer node2477(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(75);
        s.add(76);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 284
    public static Buffer K(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 284
        buf.add(node2477(ctx));

        return buf;
    }
    // The following lines are generated from line 285
    public static Buffer node2481(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(76);
        s.add(77);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 285
    public static Buffer L(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 285
        buf.add(node2481(ctx));

        return buf;
    }
    // The following lines are generated from line 286
    public static Buffer node2485(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(77);
        s.add(78);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 286
    public static Buffer M(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 286
        buf.add(node2485(ctx));

        return buf;
    }
    // The following lines are generated from line 287
    public static Buffer node2489(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(78);
        s.add(79);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 287
    public static Buffer N(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 287
        buf.add(node2489(ctx));

        return buf;
    }
    // The following lines are generated from line 288
    public static Buffer node2493(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(79);
        s.add(80);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 288
    public static Buffer O(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 288
        buf.add(node2493(ctx));

        return buf;
    }
    // The following lines are generated from line 289
    public static Buffer node2497(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(80);
        s.add(81);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 289
    public static Buffer P(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 289
        buf.add(node2497(ctx));

        return buf;
    }
    // The following lines are generated from line 290
    public static Buffer node2501(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(81);
        s.add(82);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 290
    public static Buffer Q(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 290
        buf.add(node2501(ctx));

        return buf;
    }
    // The following lines are generated from line 291
    public static Buffer node2505(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(82);
        s.add(83);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 291
    public static Buffer R(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 291
        buf.add(node2505(ctx));

        return buf;
    }
    // The following lines are generated from line 292
    public static Buffer node2509(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(83);
        s.add(84);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 292
    public static Buffer S(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 292
        buf.add(node2509(ctx));

        return buf;
    }
    // The following lines are generated from line 293
    public static Buffer node2513(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(84);
        s.add(85);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 293
    public static Buffer T(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 293
        buf.add(node2513(ctx));

        return buf;
    }
    // The following lines are generated from line 294
    public static Buffer node2517(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(85);
        s.add(86);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 294
    public static Buffer U(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 294
        buf.add(node2517(ctx));

        return buf;
    }
    // The following lines are generated from line 295
    public static Buffer node2521(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(86);
        s.add(87);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 295
    public static Buffer V(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 295
        buf.add(node2521(ctx));

        return buf;
    }
    // The following lines are generated from line 296
    public static Buffer node2525(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(87);
        s.add(88);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 296
    public static Buffer W(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 296
        buf.add(node2525(ctx));

        return buf;
    }
    // The following lines are generated from line 297
    public static Buffer node2529(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(88);
        s.add(89);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 297
    public static Buffer X(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 297
        buf.add(node2529(ctx));

        return buf;
    }
    // The following lines are generated from line 298
    public static Buffer node2533(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(89);
        s.add(90);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 298
    public static Buffer Y(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 298
        buf.add(node2533(ctx));

        return buf;
    }
    // The following lines are generated from line 299
    public static Buffer node2537(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(90);
        s.add(91);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 299
    public static Buffer Z(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 299
        buf.add(node2537(ctx));

        return buf;
    }
    // The following lines are generated from line 300
    public static Buffer node2541(Context ctx) throws Exception{
        List<Integer> s = new ArrayList<>();
        s.add(65);
        s.add(91);
        return new Buffer(""+(char)(CharSet.get_random_character_from_set(s)));
    }
    // The following lines are generated from line 300
    public static Buffer CH(Context ctx) throws Exception{
        Buffer buf = new Buffer();
        // The following lines are generated from line 300
        buf.add(node2541(ctx));

        return buf;
    }


}